{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/regenerator\";\nimport _readOnlyError from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\nimport _asyncToGenerator from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/bidStatus/bidStatus.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nvar BidStatus =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BidStatus, _React$Component);\n\n  function BidStatus(props) {\n    var _this;\n\n    _classCallCheck(this, BidStatus);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BidStatus).call(this, props));\n\n    _this.getIsAuctionComplete = function (createdAt) {\n      var momentTimeRemaining = calculateTimeRemaining(createdAt);\n      var durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n      var isAuctionComplete = durationTimeRemainingObj.isComplete;\n      return isAuctionComplete;\n    };\n\n    _this.state = {};\n    return _this;\n  } // is the auction complete\n  // is the users bid the max amount\n  // we'll need--\n  // auction createdAt or boolean whether or not it's complete\n  // userID\n  // user bid amount\n\n\n  _createClass(BidStatus, [{\n    key: \"isUserBidHighestBid\",\n    value: function () {\n      var _isUserBidHighestBid = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(auctionId, userBid) {\n        var winningBid, bidResult;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.getMaxBidAmountFromAuctionId(auctionId);\n\n              case 2:\n                winningBid = _context.sent;\n                console.log('winningBid: ', winningBid, ' vs user bid: ', userBid);\n                bidResult = null;\n\n                if (winningBid === userBid) {\n                  bidResult = (_readOnlyError(\"bidResult\"), 'Auction won');\n                } else {\n                  bidResult = (_readOnlyError(\"bidResult\"), 'Not the highest bid');\n                }\n\n                return _context.abrupt(\"return\", bidResult);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function isUserBidHighestBid(_x, _x2) {\n        return _isUserBidHighestBid.apply(this, arguments);\n      };\n    }() // returns a promise\n\n  }, {\n    key: \"getMaxBidAmountFromAuctionId\",\n    value: function getMaxBidAmountFromAuctionId(auctionId) {\n      var params = {\n        auctionId: auctionId\n      };\n      var bidAmountResult = axios.get('/api/bid/completedAuctionHighestBid', {\n        params: params\n      }).then(function (resp) {\n        return resp.data.bidAmount;\n      }).catch(function (err) {\n        console.log(err);\n      });\n      return bidAmountResult;\n    }\n  }, {\n    key: \"showBidStatus\",\n    value: function showBidStatus() {\n      var isAuctionComplete = this.getIsAuctionComplete(this.props.createdAt);\n      var bidResult = this.isUserBidHighestBid(this.props.auctionId, this.props.bidAmount);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, isAuctionComplete ? 'Complete' : 'Ongoing'), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, bidResult));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log('this.props', this.props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, this.showBidStatus()));\n    }\n  }]);\n\n  return BidStatus;\n}(React.Component);\n\nexport default BidStatus; // showBidStatus = (createdAt) => {\n//   // console.log('createdAt',createdAt);\n//   let momentTimeRemaining = calculateTimeRemaining(createdAt);\n//   let durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n//   if (durationTimeRemainingObj.isComplete) {\n//     return <span><strong>Bid Status: </strong>Complete</span>\n//   } else {\n//     return <span><strong>Bid Status: </strong>Pending</span>\n//   }\n// }\n// async getMaxBidAmountFromAuctionId (auctionId) {\n//   // async function waitForPromise() {\n//   //   let result = await Promise.resolve('this is a sample promise');\n//   // }\n//   const params = { auctionId };\n//   const bidAmountResult = await axios.get('/api/bid/completedAuctionHighestBid', { params })\n//   .then(resp => {\n//       console.log('This should be the max amount: ',resp.data.bidAmount);\n//       return resp.data.bidAmount\n//   }).catch(err => {\n//       console.log(err);\n//   });\n//   return bidAmountResult\n// }","map":{"version":3,"sources":["/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/bidStatus/bidStatus.js"],"names":["React","axios","calculateCreatedAt","calculateTimeRemaining","showDurationTimeRemaining","BidStatus","props","getIsAuctionComplete","createdAt","momentTimeRemaining","durationTimeRemainingObj","isAuctionComplete","isComplete","state","auctionId","userBid","getMaxBidAmountFromAuctionId","winningBid","console","log","bidResult","params","bidAmountResult","get","then","resp","data","bidAmount","catch","err","isUserBidHighestBid","showBidStatus","Component"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,EAA6BC,sBAA7B,EAAqDC,yBAArD,QAAsF,gCAAtF;;IAEMC,S;;;;;AACJ,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,mFAAMA,KAAN;;AADiB,UAiBnBC,oBAjBmB,GAiBI,UAACC,SAAD,EAAe;AACpC,UAAMC,mBAAmB,GAAGN,sBAAsB,CAACK,SAAD,CAAlD;AACA,UAAME,wBAAwB,GAAGN,yBAAyB,CAACK,mBAAD,CAA1D;AACA,UAAME,iBAAiB,GAAGD,wBAAwB,CAACE,UAAnD;AACA,aAAOD,iBAAP;AACD,KAtBkB;;AAGjB,UAAKE,KAAL,GAAa,EAAb;AAHiB;AAMlB,G,CAED;AACA;AAEA;AACA;AACA;AACA;;;;;;;;gDAU0BC,S,EAAUC,O;;;;;;;uBACT,KAAKC,4BAAL,CAAkCF,SAAlC,C;;;AAAnBG,gBAAAA,U;AACNC,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BF,UAA3B,EAAuC,gBAAvC,EAAwDF,OAAxD;AAEMK,gBAAAA,S,GAAY,I;;AAClB,oBAAIH,UAAU,KAAKF,OAAnB,EAA4B;AAC1BK,kBAAAA,SAAS,iCAAG,aAAH,CAAT;AACD,iBAFD,MAEO;AACLA,kBAAAA,SAAS,iCAAG,qBAAH,CAAT;AACD;;iDACMA,S;;;;;;;;;;;;;QAIT;;;;iDAC8BN,S,EAAW;AACvC,UAAMO,MAAM,GAAG;AAAEP,QAAAA,SAAS,EAATA;AAAF,OAAf;AACA,UAAMQ,eAAe,GAAGrB,KAAK,CAACsB,GAAN,CAAU,qCAAV,EAAiD;AAAEF,QAAAA,MAAM,EAANA;AAAF,OAAjD,EACvBG,IADuB,CAClB,UAAAC,IAAI,EAAI;AACV,eAAOA,IAAI,CAACC,IAAL,CAAUC,SAAjB;AACH,OAHuB,EAGrBC,KAHqB,CAGf,UAAAC,GAAG,EAAI;AACZX,QAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACH,OALuB,CAAxB;AAMA,aAAOP,eAAP;AACD;;;oCAGe;AACd,UAAMX,iBAAiB,GAAG,KAAKJ,oBAAL,CAA0B,KAAKD,KAAL,CAAWE,SAArC,CAA1B;AACA,UAAMY,SAAS,GAAG,KAAKU,mBAAL,CAAyB,KAAKxB,KAAL,CAAWQ,SAApC,EAA8C,KAAKR,KAAL,CAAWqB,SAAzD,CAAlB;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOhB,iBAAiB,GAAG,UAAH,GAAgB,SAAxC,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOS,SAAP,CAFF,CADF;AAMD;;;6BAEQ;AACPF,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyB,KAAKb,KAA9B;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKyB,aAAL,EAAJ,CADF,CADF;AAKD;;;;EAtEqB/B,KAAK,CAACgC,S;;AAyE9B,eAAe3B,SAAf,C,CAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nclass BidStatus extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n\n    }\n  }\n\n  // is the auction complete\n  // is the users bid the max amount\n\n  // we'll need--\n  // auction createdAt or boolean whether or not it's complete\n  // userID\n  // user bid amount\n\n\n  getIsAuctionComplete = (createdAt) => {\n    const momentTimeRemaining = calculateTimeRemaining(createdAt);\n    const durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n    const isAuctionComplete = durationTimeRemainingObj.isComplete\n    return isAuctionComplete\n  }\n\n  async isUserBidHighestBid(auctionId,userBid) {\n    const winningBid = await this.getMaxBidAmountFromAuctionId(auctionId);\n    console.log('winningBid: ',winningBid, ' vs user bid: ',userBid);\n\n    const bidResult = null;\n    if (winningBid === userBid) {\n      bidResult = 'Auction won';\n    } else {\n      bidResult = 'Not the highest bid';\n    }\n    return bidResult\n  }\n\n  \n  // returns a promise\n  getMaxBidAmountFromAuctionId (auctionId) {\n    const params = { auctionId };\n    const bidAmountResult = axios.get('/api/bid/completedAuctionHighestBid', { params })\n    .then(resp => {\n        return resp.data.bidAmount\n    }).catch(err => {\n        console.log(err);\n    });\n    return bidAmountResult\n  }\n\n\n  showBidStatus() {\n    const isAuctionComplete = this.getIsAuctionComplete(this.props.createdAt);\n    const bidResult = this.isUserBidHighestBid(this.props.auctionId,this.props.bidAmount);\n    return (\n      <div>\n        <span>{isAuctionComplete ? 'Complete' : 'Ongoing'}</span>\n        <span>{bidResult}</span>\n      </div>\n    )\n  }\n\n  render() {\n    console.log('this.props',this.props);\n    return (\n      <div>\n        <p>{this.showBidStatus()}</p>\n      </div>\n    )\n  }\n}\n\nexport default BidStatus;\n\n\n\n\n// showBidStatus = (createdAt) => {\n//   // console.log('createdAt',createdAt);\n//   let momentTimeRemaining = calculateTimeRemaining(createdAt);\n//   let durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n\n//   if (durationTimeRemainingObj.isComplete) {\n//     return <span><strong>Bid Status: </strong>Complete</span>\n//   } else {\n//     return <span><strong>Bid Status: </strong>Pending</span>\n//   }\n// }\n\n\n// async getMaxBidAmountFromAuctionId (auctionId) {\n\n//   // async function waitForPromise() {\n//   //   let result = await Promise.resolve('this is a sample promise');\n//   // }\n\n//   const params = { auctionId };\n//   const bidAmountResult = await axios.get('/api/bid/completedAuctionHighestBid', { params })\n//   .then(resp => {\n//       console.log('This should be the max amount: ',resp.data.bidAmount);\n//       return resp.data.bidAmount\n//   }).catch(err => {\n//       console.log(err);\n//   });\n//   return bidAmountResult\n// }"]},"metadata":{},"sourceType":"module"}