{"ast":null,"code":"var _jsxFileName = \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'; // redux\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nvar loadState = function loadState() {\n  try {\n    var serializedState = localStorage.getItem('state');\n\n    if (serializedState === null) {\n      return undefined;\n    } else {\n      return JSON.parse(serializedState);\n    }\n  } catch (err) {\n    return undefined;\n  }\n};\n\nvar persistedState = loadState();\nvar initialState = {\n  username: '',\n  password: '',\n  isLoggedIn: false\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log('action', action);\n  console.log('state', state);\n\n  switch (action.type) {\n    case 'USER_LOGIN_REQUEST':\n      console.log('global state updated - user logged in');\n      return {\n        username: action.payload.username,\n        password: action.payload.password,\n        isLoggedIn: action.payload.isLoggedIn\n      };\n\n    case 'USER_LOGOUT_REQUEST':\n      console.log('global state updated - user logged out');\n      return {\n        username: '',\n        password: '',\n        isLoggedIn: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nvar store = createStore(reducer);\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 58\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59\n  },\n  __self: this\n})), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","Provider","createStore","loadState","serializedState","localStorage","getItem","undefined","JSON","parse","err","persistedState","initialState","username","password","isLoggedIn","reducer","state","action","console","log","type","payload","store","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B,C,CAEA;;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,QAA4B,OAA5B;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB,MAAI;AACA,QAAMC,eAAe,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAxB;;AACA,QAAIF,eAAe,KAAK,IAAxB,EAA8B;AAC1B,aAAOG,SAAP;AACH,KAFD,MAEO;AACH,aAAOC,IAAI,CAACC,KAAL,CAAWL,eAAX,CAAP;AACH;AACJ,GAPD,CAOE,OAAOM,GAAP,EAAY;AACV,WAAOH,SAAP;AACH;AACJ,CAXD;;AAaA,IAAMI,cAAc,GAAGR,SAAS,EAAhC;AAEA,IAAMS,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,EADO;AAEjBC,EAAAA,QAAQ,EAAE,EAFO;AAGjBC,EAAAA,UAAU,EAAE;AAHK,CAArB;;AAMA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBL,YAAyB;AAAA,MAAXM,MAAW;AAC9CC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBF,MAArB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBH,KAApB;;AACA,UAAOC,MAAM,CAACG,IAAd;AACE,SAAK,oBAAL;AACEF,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACA,aAAO;AACLP,QAAAA,QAAQ,EAAEK,MAAM,CAACI,OAAP,CAAeT,QADpB;AAELC,QAAAA,QAAQ,EAAEI,MAAM,CAACI,OAAP,CAAeR,QAFpB;AAGLC,QAAAA,UAAU,EAAEG,MAAM,CAACI,OAAP,CAAeP;AAHtB,OAAP;;AAKF,SAAK,qBAAL;AACEI,MAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACA,aAAO;AACHP,QAAAA,QAAQ,EAAE,EADP;AAEHC,QAAAA,QAAQ,EAAE,EAFP;AAGHC,QAAAA,UAAU,EAAE;AAHT,OAAP;;AAKF;AACE,aAAOE,KAAP;AAhBJ;AAkBH,CArBD;;AAuBA,IAAMM,KAAK,GAAGrB,WAAW,CAACc,OAAD,CAAzB;AAGAlB,QAAQ,CAAC0B,MAAT,CACI,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAED,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADJ,EAKIE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CALJ,E,CAUA;AACA;AACA;;AACA1B,aAAa,CAAC2B,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// redux\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nconst loadState = () => {\n    try {\n        const serializedState = localStorage.getItem('state');\n        if (serializedState === null) {\n            return undefined;\n        } else {\n            return JSON.parse(serializedState);\n        }\n    } catch (err) {\n        return undefined;\n    }\n}\n\nconst persistedState = loadState();\n\nconst initialState = {\n    username: '',\n    password: '',\n    isLoggedIn: false\n}\n\nconst reducer = (state = initialState, action) => {\n    console.log('action',action);\n    console.log('state',state);\n    switch(action.type) {\n      case 'USER_LOGIN_REQUEST':\n        console.log('global state updated - user logged in');\n        return {\n          username: action.payload.username,\n          password: action.payload.password,\n          isLoggedIn: action.payload.isLoggedIn\n        }\n      case 'USER_LOGOUT_REQUEST':\n        console.log('global state updated - user logged out');\n        return {\n            username: '',\n            password: '',\n            isLoggedIn: false\n        }\n      default:\n        return state;\n    }\n}\n  \nconst store = createStore(reducer);\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n,\n    document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}