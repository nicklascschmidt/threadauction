{"ast":null,"code":"import _classCallCheck from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/notifications/auctionComplete.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport axios from 'axios'; // import { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nvar AuctionComplete =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AuctionComplete, _React$Component);\n\n  function AuctionComplete(props) {\n    var _this;\n\n    _classCallCheck(this, AuctionComplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AuctionComplete).call(this, props));\n\n    _this.getCompletedAuctionIds = function (completedAuctionArray) {\n      console.log('getting completed auction IDs...', completedAuctionArray);\n      var completedAuctionIds = [];\n      completedAuctionArray.map(function (auction) {\n        completedAuctionIds.push(auction.id);\n      });\n\n      _this.setState({\n        completedAuctionIds: completedAuctionIds\n      }, function () {\n        console.log('this.state', _this.state);\n      });\n    };\n\n    _this.sendToReduxStore = function (data) {\n      console.log(\"sending to redux store...\");\n      var notificationData = {\n        userNotificationArray: data.userNotificationArray\n      };\n\n      _this.props.dispatch({\n        type: \"USER_NOTIFICATION\",\n        payload: notificationData\n      });\n\n      _this.setState({\n        loading: false,\n        errorArray: [],\n        isError: false,\n        sendToRedux: false,\n        sendToReduxData: null\n      });\n    };\n\n    _this.state = {\n      userNotificationArray: [],\n      userBids: [],\n      completedAuctionArray: [],\n      completedAuctionsBidArray: [],\n      completedAuctionIds: [],\n      loading: null,\n      errorArray: [],\n      isError: null,\n      sendToRedux: false,\n      sendToReduxData: null\n    };\n    return _this;\n  }\n\n  _createClass(AuctionComplete, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log('this.props', this.props);\n      this.pullCompletedAuctionDataFromDb();\n    } // find all completed auctions - return array of objects to this.state\n\n  }, {\n    key: \"pullCompletedAuctionDataFromDb\",\n    value: function pullCompletedAuctionDataFromDb() {\n      var _this2 = this;\n\n      console.log('pulling completed auctions...');\n      axios.get('/api/auction/complete').then(function (resp) {\n        console.log('/api/auction/complete -- resp.data', resp.data);\n\n        if (resp.status === 200) {\n          console.log('success');\n\n          _this2.setState({\n            completedAuctionArray: resp.data\n          }, function () {\n            _this2.getCompletedAuctionIds(_this2.state.completedAuctionArray);\n          });\n\n          if (resp.data === null) {\n            console.log('resp.data is null');\n\n            _this2.setState({\n              errorMsg: \"We couldn't find the product. Please try again.\",\n              isDbError: true\n            });\n          } else {\n            _this2.setState({\n              errorMsg: null,\n              isDbError: false\n            });\n\n            return;\n          }\n        } else {\n          console.log('front end /api/auction/id error');\n        }\n      }).catch(function (err) {\n        _this2.setState({\n          errorMsg: \"We ran into an issue trying to find the product. Please reload the page.\",\n          isDbError: true\n        });\n\n        console.log(err);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log('~~~~~~ notification');\n      return React.createElement(\"span\", {\n        onClick: this.callme,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Yo \", this.props.userId);\n    }\n  }]);\n\n  return AuctionComplete;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    username: state.username,\n    userId: state.userId,\n    isLoggedIn: true\n  };\n}\n\nexport default connect(mapStateToProps)(AuctionComplete);","map":{"version":3,"sources":["/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/notifications/auctionComplete.js"],"names":["React","connect","axios","AuctionComplete","props","getCompletedAuctionIds","completedAuctionArray","console","log","completedAuctionIds","map","auction","push","id","setState","state","sendToReduxStore","data","notificationData","userNotificationArray","dispatch","type","payload","loading","errorArray","isError","sendToRedux","sendToReduxData","userBids","completedAuctionsBidArray","pullCompletedAuctionDataFromDb","get","then","resp","status","errorMsg","isDbError","catch","err","callme","userId","Component","mapStateToProps","username","isLoggedIn"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from \"react-redux\";\nimport axios from 'axios';\n// import { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nclass AuctionComplete extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      userNotificationArray: [],\n      userBids: [],\n      completedAuctionArray: [],\n      completedAuctionsBidArray: [],\n      completedAuctionIds: [],\n\n      loading: null,\n      errorArray: [],\n      isError: null,\n      sendToRedux: false,\n      sendToReduxData: null,\n    }\n  }\n\n  componentDidMount() {\n    console.log('this.props',this.props);\n    this.pullCompletedAuctionDataFromDb();\n  }\n\n\n  // find all completed auctions - return array of objects to this.state\n  pullCompletedAuctionDataFromDb() {\n    console.log('pulling completed auctions...');\n\n    axios.get('/api/auction/complete')\n    .then(resp => {\n        console.log('/api/auction/complete -- resp.data',resp.data);\n        if (resp.status === 200) {\n            console.log('success');\n            this.setState({\n              completedAuctionArray: resp.data\n            }, () => {\n              this.getCompletedAuctionIds(this.state.completedAuctionArray);\n            })\n            if (resp.data === null) {\n                console.log('resp.data is null');\n                this.setState({\n                    errorMsg: `We couldn't find the product. Please try again.`,\n                    isDbError: true\n                });\n            } else {\n                this.setState({\n                    errorMsg: null,\n                    isDbError: false\n                });\n                return\n            }\n        } else {\n            console.log('front end /api/auction/id error');\n        }\n    }).catch(err => {\n        this.setState({\n            errorMsg: `We ran into an issue trying to find the product. Please reload the page.`,\n            isDbError: true\n        });\n        console.log(err);\n    });\n  }\n\n  getCompletedAuctionIds = (completedAuctionArray) => {\n    console.log('getting completed auction IDs...',completedAuctionArray);\n    let completedAuctionIds = [];\n\n    completedAuctionArray.map( (auction) => {\n      completedAuctionIds.push(auction.id);\n    })\n\n    this.setState({\n      completedAuctionIds: completedAuctionIds\n    }, () => {\n      console.log('this.state',this.state);\n    })\n  }\n\n  // for all auction bids\n  // find the max for each Auction ID\n  // return the corresponding userId of that highest bid\n  // if the winning userId = userId from redux, then display notification saying you won the auction for [auctionId]\n  // search db for that auctionId and return product listing of it\n\n\n\n  sendToReduxStore = (data) => {\n    console.log(\"sending to redux store...\");\n\n    const notificationData = {\n      userNotificationArray: data.userNotificationArray,\n    };\n\n    this.props.dispatch({\n      type: \"USER_NOTIFICATION\",\n      payload: notificationData\n    });\n\n    this.setState({\n      loading: false,\n      errorArray: [],\n      isError: false,\n      sendToRedux: false,\n      sendToReduxData: null\n    });\n  };\n\n\n  render() {\n    console.log('~~~~~~ notification');\n    return (\n      <span onClick={this.callme}>\n        Yo {this.props.userId}\n      </span>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    username: state.username,\n    userId: state.userId,\n    isLoggedIn: true\n  };\n}\n\nexport default connect(mapStateToProps)(AuctionComplete);"]},"metadata":{},"sourceType":"module"}