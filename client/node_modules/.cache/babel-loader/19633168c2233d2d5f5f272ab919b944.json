{"ast":null,"code":"var _jsxFileName = \"/Users/jasondark/Desktop/threadauction/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'; // redux\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { loadState, saveState } from './localstorage';\nvar persistedState = loadState();\nvar initialState = {\n  username: null,\n  userId: null,\n  isLoggedIn: false,\n  userNotificationArray: []\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'USER_LOGIN_REQUEST':\n      console.log('global state updated - user logged in');\n      return {\n        username: action.payload.username,\n        userId: action.payload.userId,\n        isLoggedIn: action.payload.isLoggedIn\n      };\n\n    case 'USER_LOGOUT_REQUEST':\n      console.log('global state updated - user logged out');\n      return {\n        username: null,\n        userId: null,\n        isLoggedIn: false\n      };\n\n    case 'USER_NOTIFICATION':\n      console.log('global state updated - show user notification');\n      return {\n        userNotificationArray: action.payload.userNotificationArray\n      };\n\n    default:\n      return state;\n  }\n};\n\nvar store = createStore(reducer, persistedState);\nstore.subscribe(function () {\n  saveState(store.getState());\n});\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 57\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 58\n  },\n  __self: this\n})), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/jasondark/Desktop/threadauction/client/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","Provider","createStore","loadState","saveState","persistedState","initialState","username","userId","isLoggedIn","userNotificationArray","reducer","state","action","type","console","log","payload","store","subscribe","getState","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B,C,CAEA;;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,gBAArC;AAEA,IAAMC,cAAc,GAAGF,SAAS,EAAhC;AAEA,IAAMG,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,IADO;AAEjBC,EAAAA,MAAM,EAAE,IAFS;AAGjBC,EAAAA,UAAU,EAAE,KAHK;AAIjBC,EAAAA,qBAAqB,EAAE;AAJN,CAArB;;AAOA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AAC9C,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,oBAAL;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACA,aAAO;AACLT,QAAAA,QAAQ,EAAEM,MAAM,CAACI,OAAP,CAAeV,QADpB;AAELC,QAAAA,MAAM,EAAEK,MAAM,CAACI,OAAP,CAAeT,MAFlB;AAGLC,QAAAA,UAAU,EAAEI,MAAM,CAACI,OAAP,CAAeR;AAHtB,OAAP;;AAKF,SAAK,qBAAL;AACEM,MAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACA,aAAO;AACHT,QAAAA,QAAQ,EAAE,IADP;AAEHC,QAAAA,MAAM,EAAE,IAFL;AAGHC,QAAAA,UAAU,EAAE;AAHT,OAAP;;AAKF,SAAK,mBAAL;AACEM,MAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AACA,aAAO;AACHN,QAAAA,qBAAqB,EAAEG,MAAM,CAACI,OAAP,CAAeP;AADnC,OAAP;;AAGF;AACE,aAAOE,KAAP;AArBJ;AAuBH,CAxBD;;AA0BA,IAAMM,KAAK,GAAGhB,WAAW,CACrBS,OADqB,EAErBN,cAFqB,CAAzB;AAKAa,KAAK,CAACC,SAAN,CAAgB,YAAM;AAClBf,EAAAA,SAAS,CAACc,KAAK,CAACE,QAAN,EAAD,CAAT;AACH,CAFD;AAKAtB,QAAQ,CAACuB,MAAT,CACI,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEH,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADJ,EAKII,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CALJ,E,CAUA;AACA;AACA;;AACAvB,aAAa,CAACwB,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// redux\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { loadState, saveState } from './localstorage';\n\nconst persistedState = loadState();\n\nconst initialState = {\n    username: null,\n    userId: null,\n    isLoggedIn: false,\n    userNotificationArray: [],\n}\n\nconst reducer = (state = initialState, action) => {\n    switch(action.type) {\n      case 'USER_LOGIN_REQUEST':\n        console.log('global state updated - user logged in');\n        return {\n          username: action.payload.username,\n          userId: action.payload.userId,\n          isLoggedIn: action.payload.isLoggedIn,\n        }\n      case 'USER_LOGOUT_REQUEST':\n        console.log('global state updated - user logged out');\n        return {\n            username: null,\n            userId: null,\n            isLoggedIn: false\n        }\n      case 'USER_NOTIFICATION':\n        console.log('global state updated - show user notification');\n        return {\n            userNotificationArray: action.payload.userNotificationArray,\n        }\n      default:\n        return state;\n    }\n}\n  \nconst store = createStore(\n    reducer,\n    persistedState\n);\n\nstore.subscribe(() => {\n    saveState(store.getState());\n})\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n,\n    document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}