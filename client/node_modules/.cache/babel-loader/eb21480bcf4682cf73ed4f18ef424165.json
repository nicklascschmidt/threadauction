{"ast":null,"code":"import _classCallCheck from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/notifications/auctionComplete.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport axios from 'axios';\nimport { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nvar AuctionComplete =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AuctionComplete, _React$Component);\n\n  function AuctionComplete(props) {\n    var _this;\n\n    _classCallCheck(this, AuctionComplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AuctionComplete).call(this, props));\n\n    _this.componentDidMount = function () {\n      console.log('this.props', _this.props);\n\n      _this.setState({\n        userNotificationArray: []\n      });\n\n      _this.pullCompletedAuctionDataFromDb();\n    };\n\n    _this.pullCompletedAuctionDataFromDb = function () {\n      // console.log('auctionId',auctionId);\n      // const auctionData = {\n      //     auctionId: auctionId\n      // };\n      // pull auction data\n      axios.get('/api/auction/complete', {// params: auctionData\n      }).then(function (resp) {\n        console.log('resp.data', resp.data);\n\n        if (resp.status === 200) {\n          console.log('success'); // this.setState({\n          //     title: resp.data.title,\n          //     imgLink: resp.data.imgLink,\n          //     description: resp.data.description,\n          //     gender: resp.data.gender,\n          //     category: resp.data.category,\n          //     startingPrice: resp.data.startingPrice,\n          //     minBidIncrement: resp.data.minBidIncrement,\n          //     createdAt: resp.data.createdAt,\n          //     loading: false\n          // });\n\n          if (resp.data === null) {\n            console.log('resp.data is null');\n\n            _this.setState({\n              errorMsg: \"We couldn't find the product. Please try again.\",\n              isDbError: true\n            });\n          } else {\n            _this.setState({\n              errorMsg: null,\n              isDbError: false\n            });\n\n            return;\n          }\n        } else {\n          console.log('front end /api/auction/id error');\n        }\n      }).catch(function (err) {\n        _this.setState({\n          errorMsg: \"We ran into an issue trying to find the product. Please reload the page.\",\n          isDbError: true\n        });\n\n        console.log(err);\n      });\n      console.log('completed');\n    };\n\n    _this.sendToReduxStore = function (data) {\n      console.log(\"sending to redux store...\");\n      var notificationData = {\n        userNotificationArray: data.userNotificationArray\n      };\n\n      _this.props.dispatch({\n        type: \"USER_NOTIFICATION\",\n        payload: notificationData\n      });\n\n      _this.setState({\n        loading: false,\n        errorArray: [],\n        isError: false,\n        sendToRedux: false,\n        sendToReduxData: null\n      });\n    };\n\n    _this.state = {\n      userNotificationArray: [],\n      userBids: [],\n      loading: null,\n      errorArray: [],\n      isError: null,\n      sendToRedux: false,\n      sendToReduxData: null\n    };\n    return _this;\n  }\n\n  _createClass(AuctionComplete, [{\n    key: \"render\",\n    value: function render() {\n      console.log('~~~~~~ notification');\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Yo \", this.props.userId);\n    }\n  }]);\n\n  return AuctionComplete;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    username: state.username,\n    userId: state.userId,\n    isLoggedIn: true\n  };\n}\n\nexport default connect(mapStateToProps)(AuctionComplete);","map":{"version":3,"sources":["/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/notifications/auctionComplete.js"],"names":["React","connect","axios","calculateCreatedAt","calculateTimeRemaining","showDurationTimeRemaining","AuctionComplete","props","componentDidMount","console","log","setState","userNotificationArray","pullCompletedAuctionDataFromDb","get","then","resp","data","status","errorMsg","isDbError","catch","err","sendToReduxStore","notificationData","dispatch","type","payload","loading","errorArray","isError","sendToRedux","sendToReduxData","state","userBids","userId","Component","mapStateToProps","username","isLoggedIn"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from \"react-redux\";\nimport axios from 'axios';\nimport { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nclass AuctionComplete extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      userNotificationArray: [],\n      userBids: [],\n\n      loading: null,\n      errorArray: [],\n      isError: null,\n      sendToRedux: false,\n      sendToReduxData: null,\n    }\n  }\n\n  componentDidMount = () => {\n    console.log('this.props',this.props);\n    this.setState({\n      userNotificationArray: [],\n    })\n    this.pullCompletedAuctionDataFromDb();\n  }\n\n  // use userId to get all bids\n  // return each bid into an array of objects (userBids)\n  // \n\n\n  // for all auctions - find which ones have ended\n  // return ended auctions into an array of objects\n  pullCompletedAuctionDataFromDb = () => {\n    // console.log('auctionId',auctionId);\n\n    // const auctionData = {\n    //     auctionId: auctionId\n    // };\n\n    // pull auction data\n    axios.get('/api/auction/complete', {\n        // params: auctionData\n    })\n    .then(resp => {\n        console.log('resp.data',resp.data);\n        if (resp.status === 200) {\n            console.log('success');\n            // this.setState({\n            //     title: resp.data.title,\n            //     imgLink: resp.data.imgLink,\n            //     description: resp.data.description,\n            //     gender: resp.data.gender,\n            //     category: resp.data.category,\n            //     startingPrice: resp.data.startingPrice,\n            //     minBidIncrement: resp.data.minBidIncrement,\n            //     createdAt: resp.data.createdAt,\n            //     loading: false\n            // });\n            if (resp.data === null) {\n                console.log('resp.data is null');\n                this.setState({\n                    errorMsg: `We couldn't find the product. Please try again.`,\n                    isDbError: true\n                });\n            } else {\n                this.setState({\n                    errorMsg: null,\n                    isDbError: false\n                });\n                return\n            }\n        } else {\n            console.log('front end /api/auction/id error');\n        }\n    }).catch(err => {\n        this.setState({\n            errorMsg: `We ran into an issue trying to find the product. Please reload the page.`,\n            isDbError: true\n        });\n        console.log(err);\n    });\n    console.log('completed');\n  }\n\n  // for all auction bids\n  // find the max for each Auction ID\n  // return the corresponding userId of that highest bid\n  // if the winning userId = userId from redux, then display notification saying you won the auction for [auctionId]\n  // search db for that auctionId and return product listing of it\n\n\n\n  sendToReduxStore = (data) => {\n    console.log(\"sending to redux store...\");\n\n    const notificationData = {\n      userNotificationArray: data.userNotificationArray,\n    };\n\n    this.props.dispatch({\n      type: \"USER_NOTIFICATION\",\n      payload: notificationData\n    });\n\n    this.setState({\n      loading: false,\n      errorArray: [],\n      isError: false,\n      sendToRedux: false,\n      sendToReduxData: null\n    });\n  };\n\n\n  render() {\n    console.log('~~~~~~ notification');\n    return (\n      <span>\n        Yo {this.props.userId}\n      </span>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    username: state.username,\n    userId: state.userId,\n    isLoggedIn: true\n  };\n}\n\nexport default connect(mapStateToProps)(AuctionComplete);"]},"metadata":{},"sourceType":"module"}