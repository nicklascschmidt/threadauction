{"ast":null,"code":"import _classCallCheck from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/notifications/auctionComplete.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport axios from 'axios'; // import { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nvar AuctionComplete =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AuctionComplete, _React$Component);\n\n  function AuctionComplete(props) {\n    var _this;\n\n    _classCallCheck(this, AuctionComplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AuctionComplete).call(this, props));\n\n    _this.componentDidMount = function () {\n      console.log('this.props', _this.props);\n\n      _this.pullCompletedAuctionDataFromDb();\n\n      _this.callme();\n    };\n\n    _this.callme = function () {\n      console.log('hi'); // this.pullCompletedAuctionDataFromDb();\n\n      console.log('what about this');\n    };\n\n    _this.pullCompletedAuctionDataFromDb = function () {\n      console.log('pulling completed auctions...'); // axios.get('/api/auction/complete')\n      // .then(resp => {\n      //     console.log('/api/auction/complete -- resp.data',resp.data);\n      //     if (resp.status === 200) {\n      //         console.log('success');\n      //         this.setState({\n      //           completedAuctions: resp.data\n      //         }, () => {\n      //           console.log('wtf')\n      //           this.getCompletedAuctionIds(this.state.completedAuctions);\n      //         })\n      //         if (resp.data === null) {\n      //             console.log('resp.data is null');\n      //             this.setState({\n      //                 errorMsg: `We couldn't find the product. Please try again.`,\n      //                 isDbError: true\n      //             });\n      //         } else {\n      //             this.setState({\n      //                 errorMsg: null,\n      //                 isDbError: false\n      //             });\n      //             return\n      //         }\n      //     } else {\n      //         console.log('front end /api/auction/id error');\n      //     }\n      // }).catch(err => {\n      //     this.setState({\n      //         errorMsg: `We ran into an issue trying to find the product. Please reload the page.`,\n      //         isDbError: true\n      //     });\n      //     console.log(err);\n      // });\n    };\n\n    _this.getCompletedAuctionIds = function (completedAuctionArray) {\n      console.log('completedAuctionArray', completedAuctionArray);\n    };\n\n    _this.pullCompletedAuctionDataFromDb = function () {} // completedAuctionsBids\n    // for all auction bids\n    // find the max for each Auction ID\n    // return the corresponding userId of that highest bid\n    // if the winning userId = userId from redux, then display notification saying you won the auction for [auctionId]\n    // search db for that auctionId and return product listing of it\n    ;\n\n    _this.sendToReduxStore = function (data) {\n      console.log(\"sending to redux store...\");\n      var notificationData = {\n        userNotificationArray: data.userNotificationArray\n      };\n\n      _this.props.dispatch({\n        type: \"USER_NOTIFICATION\",\n        payload: notificationData\n      });\n\n      _this.setState({\n        loading: false,\n        errorArray: [],\n        isError: false,\n        sendToRedux: false,\n        sendToReduxData: null\n      });\n    };\n\n    _this.state = {\n      userNotificationArray: [],\n      userBids: [],\n      completedAuctions: [],\n      completedAuctionsBids: [],\n      loading: null,\n      errorArray: [],\n      isError: null,\n      sendToRedux: false,\n      sendToReduxData: null\n    };\n    _this.componentDidMount = _this.componentDidMount.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.pullCompletedAuctionDataFromDb = _this.pullCompletedAuctionDataFromDb.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getCompletedAuctionIds = _this.getCompletedAuctionIds.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.pullCompletedAuctionDataFromDb = _this.pullCompletedAuctionDataFromDb.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(AuctionComplete, [{\n    key: \"render\",\n    value: function render() {\n      console.log('~~~~~~ notification');\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Yo \", this.props.userId);\n    }\n  }]);\n\n  return AuctionComplete;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    username: state.username,\n    userId: state.userId,\n    isLoggedIn: true\n  };\n}\n\nexport default connect(mapStateToProps)(AuctionComplete);","map":{"version":3,"sources":["/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/notifications/auctionComplete.js"],"names":["React","connect","axios","AuctionComplete","props","componentDidMount","console","log","pullCompletedAuctionDataFromDb","callme","getCompletedAuctionIds","completedAuctionArray","sendToReduxStore","data","notificationData","userNotificationArray","dispatch","type","payload","setState","loading","errorArray","isError","sendToRedux","sendToReduxData","state","userBids","completedAuctions","completedAuctionsBids","bind","userId","Component","mapStateToProps","username","isLoggedIn"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;IAEMC,e;;;;;AACJ,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,yFAAMA,KAAN;;AADiB,UAqBnBC,iBArBmB,GAqBC,YAAM;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyB,MAAKH,KAA9B;;AACA,YAAKI,8BAAL;;AACA,YAAKC,MAAL;AACD,KAzBkB;;AAAA,UA2BnBA,MA3BmB,GA2BV,YAAM;AACbH,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EADa,CAEb;;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD,KA/BkB;;AAAA,UAmCnBC,8BAnCmB,GAmCc,YAAM;AACrCF,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EADqC,CAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAvEkB;;AAAA,UAyEnBG,sBAzEmB,GAyEM,UAACC,qBAAD,EAA2B;AAClDL,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAoCI,qBAApC;AACD,KA3EkB;;AAAA,UA6EnBH,8BA7EmB,GA6Ec,YAAM,CAEtC,CAFgC,CAC/B;AAGF;AACA;AACA;AACA;AACA;AArFmB;;AAAA,UAyFnBI,gBAzFmB,GAyFA,UAACC,IAAD,EAAU;AAC3BP,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AAEA,UAAMO,gBAAgB,GAAG;AACvBC,QAAAA,qBAAqB,EAAEF,IAAI,CAACE;AADL,OAAzB;;AAIA,YAAKX,KAAL,CAAWY,QAAX,CAAoB;AAClBC,QAAAA,IAAI,EAAE,mBADY;AAElBC,QAAAA,OAAO,EAAEJ;AAFS,OAApB;;AAKA,YAAKK,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,KADG;AAEZC,QAAAA,UAAU,EAAE,EAFA;AAGZC,QAAAA,OAAO,EAAE,KAHG;AAIZC,QAAAA,WAAW,EAAE,KAJD;AAKZC,QAAAA,eAAe,EAAE;AALL,OAAd;AAOD,KA5GkB;;AAGjB,UAAKC,KAAL,GAAa;AACXV,MAAAA,qBAAqB,EAAE,EADZ;AAEXW,MAAAA,QAAQ,EAAE,EAFC;AAGXC,MAAAA,iBAAiB,EAAE,EAHR;AAIXC,MAAAA,qBAAqB,EAAE,EAJZ;AAMXR,MAAAA,OAAO,EAAE,IANE;AAOXC,MAAAA,UAAU,EAAE,EAPD;AAQXC,MAAAA,OAAO,EAAE,IARE;AASXC,MAAAA,WAAW,EAAE,KATF;AAUXC,MAAAA,eAAe,EAAE;AAVN,KAAb;AAYA,UAAKnB,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBwB,IAAvB,uDAAzB;AACA,UAAKrB,8BAAL,GAAsC,MAAKA,8BAAL,CAAoCqB,IAApC,uDAAtC;AACA,UAAKnB,sBAAL,GAA8B,MAAKA,sBAAL,CAA4BmB,IAA5B,uDAA9B;AACA,UAAKrB,8BAAL,GAAsC,MAAKA,8BAAL,CAAoCqB,IAApC,uDAAtC;AAlBiB;AAmBlB;;;;6BA4FQ;AACPvB,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACM,KAAKH,KAAL,CAAW0B,MADjB,CADF;AAKD;;;;EAvH2B9B,KAAK,CAAC+B,S;;AA0HpC,SAASC,eAAT,CAAyBP,KAAzB,EAAgC;AAC9B,SAAO;AACLQ,IAAAA,QAAQ,EAAER,KAAK,CAACQ,QADX;AAELH,IAAAA,MAAM,EAAEL,KAAK,CAACK,MAFT;AAGLI,IAAAA,UAAU,EAAE;AAHP,GAAP;AAKD;;AAED,eAAejC,OAAO,CAAC+B,eAAD,CAAP,CAAyB7B,eAAzB,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from \"react-redux\";\nimport axios from 'axios';\n// import { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nclass AuctionComplete extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      userNotificationArray: [],\n      userBids: [],\n      completedAuctions: [],\n      completedAuctionsBids: [],\n\n      loading: null,\n      errorArray: [],\n      isError: null,\n      sendToRedux: false,\n      sendToReduxData: null,\n    }\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.pullCompletedAuctionDataFromDb = this.pullCompletedAuctionDataFromDb.bind(this);\n    this.getCompletedAuctionIds = this.getCompletedAuctionIds.bind(this);\n    this.pullCompletedAuctionDataFromDb = this.pullCompletedAuctionDataFromDb.bind(this);\n  }\n\n  componentDidMount = () => {\n    console.log('this.props',this.props);\n    this.pullCompletedAuctionDataFromDb();\n    this.callme();\n  }\n\n  callme = () => {\n    console.log('hi');\n    // this.pullCompletedAuctionDataFromDb();\n    console.log('what about this');\n  }\n\n\n  // find all completed auctions - return array of objects to this.state\n  pullCompletedAuctionDataFromDb = () => {\n    console.log('pulling completed auctions...');\n    // axios.get('/api/auction/complete')\n    // .then(resp => {\n    //     console.log('/api/auction/complete -- resp.data',resp.data);\n    //     if (resp.status === 200) {\n    //         console.log('success');\n    //         this.setState({\n    //           completedAuctions: resp.data\n    //         }, () => {\n    //           console.log('wtf')\n    //           this.getCompletedAuctionIds(this.state.completedAuctions);\n    //         })\n    //         if (resp.data === null) {\n    //             console.log('resp.data is null');\n    //             this.setState({\n    //                 errorMsg: `We couldn't find the product. Please try again.`,\n    //                 isDbError: true\n    //             });\n    //         } else {\n    //             this.setState({\n    //                 errorMsg: null,\n    //                 isDbError: false\n    //             });\n    //             return\n    //         }\n    //     } else {\n    //         console.log('front end /api/auction/id error');\n    //     }\n    // }).catch(err => {\n    //     this.setState({\n    //         errorMsg: `We ran into an issue trying to find the product. Please reload the page.`,\n    //         isDbError: true\n    //     });\n    //     console.log(err);\n    // });\n  }\n\n  getCompletedAuctionIds = (completedAuctionArray) => {\n    console.log('completedAuctionArray',completedAuctionArray);\n  }\n\n  pullCompletedAuctionDataFromDb = () => {\n    // completedAuctionsBids\n  }\n\n  // for all auction bids\n  // find the max for each Auction ID\n  // return the corresponding userId of that highest bid\n  // if the winning userId = userId from redux, then display notification saying you won the auction for [auctionId]\n  // search db for that auctionId and return product listing of it\n\n\n\n  sendToReduxStore = (data) => {\n    console.log(\"sending to redux store...\");\n\n    const notificationData = {\n      userNotificationArray: data.userNotificationArray,\n    };\n\n    this.props.dispatch({\n      type: \"USER_NOTIFICATION\",\n      payload: notificationData\n    });\n\n    this.setState({\n      loading: false,\n      errorArray: [],\n      isError: false,\n      sendToRedux: false,\n      sendToReduxData: null\n    });\n  };\n\n\n  render() {\n    console.log('~~~~~~ notification');\n    return (\n      <span>\n        Yo {this.props.userId}\n      </span>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    username: state.username,\n    userId: state.userId,\n    isLoggedIn: true\n  };\n}\n\nexport default connect(mapStateToProps)(AuctionComplete);"]},"metadata":{},"sourceType":"module"}