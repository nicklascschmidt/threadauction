{"ast":null,"code":"import _classCallCheck from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/notifications/auctionComplete.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport axios from 'axios'; // import { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nvar AuctionComplete =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AuctionComplete, _React$Component);\n\n  function AuctionComplete(props) {\n    var _this;\n\n    _classCallCheck(this, AuctionComplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AuctionComplete).call(this, props));\n\n    _this.getCompletedAuctionIds = function (completedAuctionArray) {\n      console.log('getting completed auction IDs...');\n      var completedAuctionIdArray = [];\n      completedAuctionArray.map(function (auction) {\n        completedAuctionIdArray.push(auction.id);\n      });\n\n      _this.setState({\n        completedAuctionIdArray: completedAuctionIdArray\n      }, function () {\n        console.log('These are the IDs of the completed auctions', _this.state.completedAuctionIdArray);\n\n        _this.loopAuctionsForHighestBid(_this.state.completedAuctionIdArray);\n      });\n    };\n\n    _this.sendToReduxStore = function (data) {\n      console.log(\"sending to redux store...\");\n      var notificationData = {\n        userNotificationArray: data.userNotificationArray\n      };\n\n      _this.props.dispatch({\n        type: \"USER_NOTIFICATION\",\n        payload: notificationData\n      });\n\n      _this.setState({\n        loading: false,\n        errorArray: [],\n        isError: false,\n        sendToRedux: false,\n        sendToReduxData: null\n      });\n    };\n\n    _this.state = {\n      userNotificationArray: [],\n      userBids: [],\n      completedAuctionArray: [],\n      // all completed auctions\n      completedAuctionsBidArray: [],\n      // Bids the user placed on completed auctions\n      completedAuctionIdArray: [],\n      // AuctionIDs of completed auctions\n      userBidsArray: [],\n      winningBidsArray: [],\n      loading: null,\n      errorArray: [],\n      isError: null,\n      sendToRedux: false,\n      sendToReduxData: null\n    };\n    return _this;\n  }\n\n  _createClass(AuctionComplete, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log('this.props', this.props);\n      this.pullCompletedAuctionDataFromDb();\n    } // find all completed auctions - return array of objects to this.state\n\n  }, {\n    key: \"pullCompletedAuctionDataFromDb\",\n    value: function pullCompletedAuctionDataFromDb() {\n      var _this2 = this;\n\n      console.log('pulling completed auctions...');\n      axios.get('/api/auction/complete').then(function (resp) {\n        console.log('These are all of the completed auctions: ', resp.data);\n\n        _this2.setState({\n          completedAuctionArray: resp.data\n        }, function () {\n          _this2.getCompletedAuctionIds(_this2.state.completedAuctionArray);\n        });\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n  }, {\n    key: \"loopAuctionsForHighestBid\",\n    value: function loopAuctionsForHighestBid(completedAuctionIdArray) {\n      var _this3 = this;\n\n      console.log('Now, we\\'re looping through the auction array and pulling highest bids for each one');\n      var bidPromises = [];\n\n      var _loop = function _loop(n) {\n        bidPromises.push(new Promise(function (resolve, reject) {\n          _this3.fetchHighestBidFromDb(completedAuctionIdArray[n]).then(function (resp) {\n            resolve(resp.data);\n          }).catch(function (err) {\n            reject(err);\n          });\n        }));\n      };\n\n      for (var n = 0; n < completedAuctionIdArray.length; n++) {\n        _loop(n);\n      }\n\n      Promise.all(bidPromises).then(function (bidPromiseData) {\n        var filteredArray = bidPromiseData.filter(function (value) {\n          return value != '';\n        });\n\n        _this3.setState({\n          winningBidsArray: filteredArray\n        }, function () {\n          console.log(\"winningBidsArray has been set\");\n\n          _this3.findUserAuctionWins(_this3.state.winningBidsArray);\n        });\n      }).catch(function (err) {\n        console.log('an error occurred: ', err);\n      });\n    } // Returns a promise\n\n  }, {\n    key: \"fetchHighestBidFromDb\",\n    value: function fetchHighestBidFromDb(auctionId) {\n      var auctionData = {\n        auctionId: auctionId\n      };\n      return axios.get('/api/bid/completedAuctionHighestBid', {\n        params: auctionData\n      });\n    }\n  }, {\n    key: \"findUserAuctionWins\",\n    value: function findUserAuctionWins(winningBidsArray) {\n      for (var n = 0; n < winningBidsArray.length; n++) {\n        console.log(winningBidsArray[n]);\n        console.log(this.props.userId);\n      }\n    }\n  }, {\n    key: \"pullHighestBidFromDb\",\n    value: function pullHighestBidFromDb(auctionId) {\n      var _this4 = this;\n\n      console.log('pulling completed auction bids...');\n      var auctionData = {\n        auctionId: auctionId\n      };\n      axios.get('/api/bid/completedAuctionHighestBid', {\n        params: auctionData\n      }).then(function (resp) {\n        console.log('/api/bid/completedAuctionBids -- resp.data', resp.data);\n\n        _this4.setState({\n          completedAuctionsBidArray: resp.data\n        }, function () {\n          console.log('this.state.completedAuctionsBidArray', _this4.state.completedAuctionsBidArray); // this.buildUserBidsArray(this.state.completedAuctionsBidArray);\n        });\n      }).catch(function (err) {\n        console.log(err);\n      });\n    } // for all auction bids\n    // find the max for each Auction ID\n    // return the corresponding userId of that highest bid\n    // if the winning userId = userId from redux, then display notification saying you won the auction for [auctionId]\n    // search db for that auctionId and return product listing of it\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"span\", {\n        onClick: this.callme,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"Yo \", this.props.userId);\n    }\n  }]);\n\n  return AuctionComplete;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    username: state.username,\n    userId: state.userId,\n    isLoggedIn: true\n  };\n}\n\nexport default connect(mapStateToProps)(AuctionComplete);","map":{"version":3,"sources":["/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/notifications/auctionComplete.js"],"names":["React","connect","axios","AuctionComplete","props","getCompletedAuctionIds","completedAuctionArray","console","log","completedAuctionIdArray","map","auction","push","id","setState","state","loopAuctionsForHighestBid","sendToReduxStore","data","notificationData","userNotificationArray","dispatch","type","payload","loading","errorArray","isError","sendToRedux","sendToReduxData","userBids","completedAuctionsBidArray","userBidsArray","winningBidsArray","pullCompletedAuctionDataFromDb","get","then","resp","catch","err","bidPromises","n","Promise","resolve","reject","fetchHighestBidFromDb","length","all","bidPromiseData","filteredArray","filter","value","findUserAuctionWins","auctionId","auctionData","params","userId","callme","Component","mapStateToProps","username","isLoggedIn"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from \"react-redux\";\nimport axios from 'axios';\n// import { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nclass AuctionComplete extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      userNotificationArray: [],\n      userBids: [],\n      completedAuctionArray: [], // all completed auctions\n      completedAuctionsBidArray: [], // Bids the user placed on completed auctions\n      completedAuctionIdArray: [], // AuctionIDs of completed auctions\n      userBidsArray: [],\n      winningBidsArray: [],\n\n      loading: null,\n      errorArray: [],\n      isError: null,\n      sendToRedux: false,\n      sendToReduxData: null,\n    }\n  }\n\n  componentDidMount() {\n    console.log('this.props',this.props);\n    this.pullCompletedAuctionDataFromDb();\n  }\n\n\n  // find all completed auctions - return array of objects to this.state\n  pullCompletedAuctionDataFromDb() {\n    console.log('pulling completed auctions...');\n\n    axios.get('/api/auction/complete')\n    .then(resp => {\n        console.log('These are all of the completed auctions: ',resp.data);\n        this.setState({\n          completedAuctionArray: resp.data\n        }, () => {\n          this.getCompletedAuctionIds(this.state.completedAuctionArray);\n        })\n    }).catch(err => {\n        console.log(err);\n    });\n  }\n\n  getCompletedAuctionIds = (completedAuctionArray) => {\n    console.log('getting completed auction IDs...');\n    let completedAuctionIdArray = [];\n\n    completedAuctionArray.map( (auction) => {\n      completedAuctionIdArray.push(auction.id);\n    })\n\n    this.setState({\n      completedAuctionIdArray: completedAuctionIdArray\n    }, () => {\n      console.log('These are the IDs of the completed auctions',this.state.completedAuctionIdArray);\n      this.loopAuctionsForHighestBid(this.state.completedAuctionIdArray);\n    })\n  }\n\n  loopAuctionsForHighestBid(completedAuctionIdArray) {\n    console.log('Now, we\\'re looping through the auction array and pulling highest bids for each one');\n\n    const bidPromises = [];\n    for (let n=0; n<completedAuctionIdArray.length; n++) {\n      bidPromises.push(new Promise( (resolve, reject) => {\n        this.fetchHighestBidFromDb(completedAuctionIdArray[n])\n          .then(resp => {\n            resolve(resp.data);\n          }).catch(err => {\n            reject(err);\n          })\n      }))\n    }\n\n    Promise.all(bidPromises).then(bidPromiseData => {\n      const filteredArray = bidPromiseData.filter( (value) => {\n        return value != '';\n      })\n      this.setState({\n        winningBidsArray: filteredArray\n      }, () => {\n        console.log(\"winningBidsArray has been set\")\n        this.findUserAuctionWins(this.state.winningBidsArray);\n      })\n    }).catch(err => {\n      console.log('an error occurred: ',err);\n    })\n  }\n\n  // Returns a promise\n  fetchHighestBidFromDb(auctionId) {\n    const auctionData = {\n      auctionId\n    };\n    return axios.get('/api/bid/completedAuctionHighestBid', {\n      params: auctionData\n    })\n  }\n\n  findUserAuctionWins(winningBidsArray) {\n    for (let n=0; n<winningBidsArray.length; n++) {\n      console.log(winningBidsArray[n]);\n      console.log(this.props.userId)\n    }\n  }\n\n  pullHighestBidFromDb(auctionId) {\n    console.log('pulling completed auction bids...');\n\n    const auctionData = { auctionId };\n    axios.get('/api/bid/completedAuctionHighestBid', {\n      params: auctionData\n    })\n    .then(resp => {\n      console.log('/api/bid/completedAuctionBids -- resp.data',resp.data);\n      this.setState({\n        completedAuctionsBidArray: resp.data\n      }, () => {\n        console.log('this.state.completedAuctionsBidArray',this.state.completedAuctionsBidArray);\n        // this.buildUserBidsArray(this.state.completedAuctionsBidArray);\n      })\n    }).catch(err => {\n        console.log(err);\n    });\n  }\n\n\n  // for all auction bids\n  // find the max for each Auction ID\n  // return the corresponding userId of that highest bid\n  // if the winning userId = userId from redux, then display notification saying you won the auction for [auctionId]\n  // search db for that auctionId and return product listing of it\n\n\n\n  sendToReduxStore = (data) => {\n    console.log(\"sending to redux store...\");\n\n    const notificationData = {\n      userNotificationArray: data.userNotificationArray,\n    };\n\n    this.props.dispatch({\n      type: \"USER_NOTIFICATION\",\n      payload: notificationData\n    });\n\n    this.setState({\n      loading: false,\n      errorArray: [],\n      isError: false,\n      sendToRedux: false,\n      sendToReduxData: null\n    });\n  };\n\n\n  render() {\n    return (\n      <span onClick={this.callme}>\n        Yo {this.props.userId}\n      </span>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    username: state.username,\n    userId: state.userId,\n    isLoggedIn: true\n  };\n}\n\nexport default connect(mapStateToProps)(AuctionComplete);"]},"metadata":{},"sourceType":"module"}