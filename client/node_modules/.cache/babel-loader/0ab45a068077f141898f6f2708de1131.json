{"ast":null,"code":"import _readOnlyError from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\nimport _classCallCheck from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/bidStatus/bidStatus.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nvar BidStatus =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BidStatus, _React$Component);\n\n  function BidStatus(props) {\n    var _this;\n\n    _classCallCheck(this, BidStatus);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BidStatus).call(this, props));\n\n    _this.getIsAuctionComplete = function (createdAt) {\n      var momentTimeRemaining = calculateTimeRemaining(createdAt);\n      var durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n      var isAuctionComplete = durationTimeRemainingObj.isComplete;\n      return isAuctionComplete;\n    };\n\n    _this.state = {};\n    return _this;\n  } // is the auction complete\n  // is the users bid the max amount\n  // we'll need--\n  // auction createdAt or boolean whether or not it's complete\n  // userID\n  // user bid amount\n\n\n  _createClass(BidStatus, [{\n    key: \"isUserBidHighestBid\",\n    value: function isUserBidHighestBid(auctionId, userBid) {\n      var winningBid = Promise.resolve(this.getMaxBidAmountFromAuctionId(auctionId));\n      winningBid.then(function () {\n        console.log('winningBid', winningBid);\n      });\n      console.log('winningBid: ', winningBid, ' vs user bid: ', userBid);\n      var bidResult = null;\n\n      if (winningBid === userBid) {\n        bidResult = (_readOnlyError(\"bidResult\"), 'Auction won');\n      } else {\n        bidResult = (_readOnlyError(\"bidResult\"), 'Not the highest bid');\n      }\n\n      return bidResult;\n    } // returns a promise\n\n  }, {\n    key: \"getMaxBidAmountFromAuctionId\",\n    value: function getMaxBidAmountFromAuctionId(auctionId) {\n      var params = {\n        auctionId: auctionId\n      };\n      var bidAmountResult = axios.get('/api/bid/completedAuctionHighestBid', {\n        params: params\n      }).then(function (resp) {\n        return resp.data.bidAmount;\n      }).catch(function (err) {\n        console.log(err);\n      });\n      return bidAmountResult;\n    }\n  }, {\n    key: \"showBidStatus\",\n    value: function showBidStatus() {\n      var isAuctionComplete = this.getIsAuctionComplete(this.props.createdAt);\n      var bidResult = this.isUserBidHighestBid(this.props.auctionId, this.props.bidAmount);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, isAuctionComplete ? 'Complete' : 'Ongoing'));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log('this.props', this.props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, this.showBidStatus());\n    }\n  }]);\n\n  return BidStatus;\n}(React.Component);\n\nexport default BidStatus; // async isUserBidHighestBid(auctionId,userBid) {\n//   const winningBid = await this.getMaxBidAmountFromAuctionId(auctionId);\n//   console.log('winningBid: ',winningBid, ' vs user bid: ',userBid);\n//   const bidResult = null;\n//   if (winningBid === userBid) {\n//     bidResult = 'Auction won';\n//   } else {\n//     bidResult = 'Not the highest bid';\n//   }\n//   return bidResult\n// }\n// // returns a promise\n// getMaxBidAmountFromAuctionId (auctionId) {\n//   const params = { auctionId };\n//   const bidAmountResult = axios.get('/api/bid/completedAuctionHighestBid', { params })\n//   .then(resp => {\n//       return resp.data.bidAmount\n//   }).catch(err => {\n//       console.log(err);\n//   });\n//   return bidAmountResult\n// }\n// showBidStatus = (createdAt) => {\n//   // console.log('createdAt',createdAt);\n//   let momentTimeRemaining = calculateTimeRemaining(createdAt);\n//   let durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n//   if (durationTimeRemainingObj.isComplete) {\n//     return <span><strong>Bid Status: </strong>Complete</span>\n//   } else {\n//     return <span><strong>Bid Status: </strong>Pending</span>\n//   }\n// }\n// async getMaxBidAmountFromAuctionId (auctionId) {\n//   // async function waitForPromise() {\n//   //   let result = await Promise.resolve('this is a sample promise');\n//   // }\n//   const params = { auctionId };\n//   const bidAmountResult = await axios.get('/api/bid/completedAuctionHighestBid', { params })\n//   .then(resp => {\n//       console.log('This should be the max amount: ',resp.data.bidAmount);\n//       return resp.data.bidAmount\n//   }).catch(err => {\n//       console.log(err);\n//   });\n//   return bidAmountResult\n// }","map":{"version":3,"sources":["/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/bidStatus/bidStatus.js"],"names":["React","axios","calculateCreatedAt","calculateTimeRemaining","showDurationTimeRemaining","BidStatus","props","getIsAuctionComplete","createdAt","momentTimeRemaining","durationTimeRemainingObj","isAuctionComplete","isComplete","state","auctionId","userBid","winningBid","Promise","resolve","getMaxBidAmountFromAuctionId","then","console","log","bidResult","params","bidAmountResult","get","resp","data","bidAmount","catch","err","isUserBidHighestBid","showBidStatus","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nclass BidStatus extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n\n    }\n  }\n\n  // is the auction complete\n  // is the users bid the max amount\n\n  // we'll need--\n  // auction createdAt or boolean whether or not it's complete\n  // userID\n  // user bid amount\n\n\n  getIsAuctionComplete = (createdAt) => {\n    const momentTimeRemaining = calculateTimeRemaining(createdAt);\n    const durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n    const isAuctionComplete = durationTimeRemainingObj.isComplete\n    return isAuctionComplete\n  }\n\n  isUserBidHighestBid(auctionId,userBid) {\n    const winningBid = Promise.resolve(this.getMaxBidAmountFromAuctionId(auctionId))\n    winningBid.then( () => {\n      console.log('winningBid',winningBid)\n    })\n    console.log('winningBid: ',winningBid, ' vs user bid: ',userBid);\n\n    const bidResult = null;\n    if (winningBid === userBid) {\n      bidResult = 'Auction won';\n    } else {\n      bidResult = 'Not the highest bid';\n    }\n    return bidResult\n  }\n\n  \n  // returns a promise\n  getMaxBidAmountFromAuctionId (auctionId) {\n    const params = { auctionId };\n    const bidAmountResult = axios.get('/api/bid/completedAuctionHighestBid', { params })\n    .then(resp => {\n        return resp.data.bidAmount\n    }).catch(err => {\n        console.log(err);\n    });\n    return bidAmountResult\n  }\n\n\n  showBidStatus() {\n    const isAuctionComplete = this.getIsAuctionComplete(this.props.createdAt);\n    const bidResult = this.isUserBidHighestBid(this.props.auctionId,this.props.bidAmount);\n\n    return (\n      <div>\n        <span>{isAuctionComplete ? 'Complete' : 'Ongoing'}</span>\n        {/* <span>{bidResult}</span> */}\n      </div>\n    )\n  }\n\n  render() {\n    console.log('this.props',this.props);\n    return (\n      <div>\n        {this.showBidStatus()}\n      </div>\n    )\n  }\n}\n\nexport default BidStatus;\n\n\n\n// async isUserBidHighestBid(auctionId,userBid) {\n//   const winningBid = await this.getMaxBidAmountFromAuctionId(auctionId);\n//   console.log('winningBid: ',winningBid, ' vs user bid: ',userBid);\n\n//   const bidResult = null;\n//   if (winningBid === userBid) {\n//     bidResult = 'Auction won';\n//   } else {\n//     bidResult = 'Not the highest bid';\n//   }\n//   return bidResult\n// }\n\n\n// // returns a promise\n// getMaxBidAmountFromAuctionId (auctionId) {\n//   const params = { auctionId };\n//   const bidAmountResult = axios.get('/api/bid/completedAuctionHighestBid', { params })\n//   .then(resp => {\n//       return resp.data.bidAmount\n//   }).catch(err => {\n//       console.log(err);\n//   });\n//   return bidAmountResult\n// }\n\n// showBidStatus = (createdAt) => {\n//   // console.log('createdAt',createdAt);\n//   let momentTimeRemaining = calculateTimeRemaining(createdAt);\n//   let durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n\n//   if (durationTimeRemainingObj.isComplete) {\n//     return <span><strong>Bid Status: </strong>Complete</span>\n//   } else {\n//     return <span><strong>Bid Status: </strong>Pending</span>\n//   }\n// }\n\n\n// async getMaxBidAmountFromAuctionId (auctionId) {\n\n//   // async function waitForPromise() {\n//   //   let result = await Promise.resolve('this is a sample promise');\n//   // }\n\n//   const params = { auctionId };\n//   const bidAmountResult = await axios.get('/api/bid/completedAuctionHighestBid', { params })\n//   .then(resp => {\n//       console.log('This should be the max amount: ',resp.data.bidAmount);\n//       return resp.data.bidAmount\n//   }).catch(err => {\n//       console.log(err);\n//   });\n//   return bidAmountResult\n// }"]},"metadata":{},"sourceType":"module"}