{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _readOnlyError from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\nimport _classCallCheck from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/bidStatus/bidStatus.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nvar BidStatus =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BidStatus, _React$Component);\n\n  function BidStatus(props) {\n    var _this;\n\n    _classCallCheck(this, BidStatus);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BidStatus).call(this, props));\n\n    _this.getIsAuctionComplete = function (createdAt) {\n      var momentTimeRemaining = calculateTimeRemaining(createdAt);\n      var durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n      var isAuctionComplete = durationTimeRemainingObj.isComplete;\n      return isAuctionComplete;\n    };\n\n    _this.state = {\n      winningBid: null,\n      bidResult: null\n    };\n    return _this;\n  } // is the auction complete\n  // is the users bid the max amount\n  // we'll need--\n  // auction createdAt or boolean whether or not it's complete\n  // userID\n  // user bid amount\n\n\n  _createClass(BidStatus, [{\n    key: \"isUserBidHighestBid\",\n    value: function isUserBidHighestBid(auctionId, userBid) {\n      var _this2 = this;\n\n      var winningBid = this.getMaxBidAmountFromAuctionId(auctionId);\n      console.log('winningBid: ', winningBid, ' vs user bid: ', userBid); // this.setState({\n      //   winningBid: winningBid\n      // }, () => {\n      //   console.log('this.state',this.state.winningBid)\n      // })\n\n      var bidResult = null;\n\n      if (winningBid === userBid) {\n        bidResult = (_readOnlyError(\"bidResult\"), 'Auction won');\n      } else {\n        bidResult = (_readOnlyError(\"bidResult\"), 'Not the highest bid');\n      }\n\n      this.setState({\n        bidResult: bidResult\n      }, function () {\n        console.log('this.state.bidResult', _this2.state.bidResult);\n      });\n      return Promise.resolve(bidResult);\n    } // returns a promise\n\n  }, {\n    key: \"getMaxBidAmountFromAuctionId\",\n    value: function () {\n      var _getMaxBidAmountFromAuctionId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(auctionId) {\n        var params, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                params = {\n                  auctionId: auctionId\n                };\n                _context.next = 3;\n                return axios.get('/api/bid/completedAuctionHighestBid', {\n                  params: params\n                }).then(function (resp) {\n                  return resp.data.bidAmount;\n                }).catch(function (err) {\n                  return Promise.reject(Error(err));\n                });\n\n              case 3:\n                result = _context.sent;\n                return _context.abrupt(\"return\", Promise.resolve(result));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function getMaxBidAmountFromAuctionId(_x) {\n        return _getMaxBidAmountFromAuctionId.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"showBidStatus\",\n    value: function showBidStatus() {\n      var isAuctionComplete = this.getIsAuctionComplete(this.props.createdAt);\n      var bidResult = Promise.resolve(this.isUserBidHighestBid(this.props.auctionId, this.props.bidAmount));\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, isAuctionComplete ? 'Complete' : 'Ongoing'));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log('this.props', this.props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, this.showBidStatus());\n    }\n  }]);\n\n  return BidStatus;\n}(React.Component);\n\nexport default BidStatus; // async isUserBidHighestBid(auctionId,userBid) {\n//   const winningBid = await this.getMaxBidAmountFromAuctionId(auctionId);\n//   console.log('winningBid: ',winningBid, ' vs user bid: ',userBid);\n//   const bidResult = null;\n//   if (winningBid === userBid) {\n//     bidResult = 'Auction won';\n//   } else {\n//     bidResult = 'Not the highest bid';\n//   }\n//   return bidResult\n// }\n// // returns a promise\n// getMaxBidAmountFromAuctionId (auctionId) {\n//   const params = { auctionId };\n//   const bidAmountResult = axios.get('/api/bid/completedAuctionHighestBid', { params })\n//   .then(resp => {\n//       return resp.data.bidAmount\n//   }).catch(err => {\n//       console.log(err);\n//   });\n//   return bidAmountResult\n// }\n// showBidStatus = (createdAt) => {\n//   // console.log('createdAt',createdAt);\n//   let momentTimeRemaining = calculateTimeRemaining(createdAt);\n//   let durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n//   if (durationTimeRemainingObj.isComplete) {\n//     return <span><strong>Bid Status: </strong>Complete</span>\n//   } else {\n//     return <span><strong>Bid Status: </strong>Pending</span>\n//   }\n// }\n// async getMaxBidAmountFromAuctionId (auctionId) {\n//   // async function waitForPromise() {\n//   //   let result = await Promise.resolve('this is a sample promise');\n//   // }\n//   const params = { auctionId };\n//   const bidAmountResult = await axios.get('/api/bid/completedAuctionHighestBid', { params })\n//   .then(resp => {\n//       console.log('This should be the max amount: ',resp.data.bidAmount);\n//       return resp.data.bidAmount\n//   }).catch(err => {\n//       console.log(err);\n//   });\n//   return bidAmountResult\n// }","map":{"version":3,"sources":["/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/bidStatus/bidStatus.js"],"names":["React","axios","calculateCreatedAt","calculateTimeRemaining","showDurationTimeRemaining","BidStatus","props","getIsAuctionComplete","createdAt","momentTimeRemaining","durationTimeRemainingObj","isAuctionComplete","isComplete","state","winningBid","bidResult","auctionId","userBid","getMaxBidAmountFromAuctionId","console","log","setState","Promise","resolve","params","get","then","resp","data","bidAmount","catch","err","reject","Error","result","isUserBidHighestBid","showBidStatus","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nclass BidStatus extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      winningBid: null,\n      bidResult: null,\n    }\n  }\n\n  // is the auction complete\n  // is the users bid the max amount\n\n  // we'll need--\n  // auction createdAt or boolean whether or not it's complete\n  // userID\n  // user bid amount\n\n\n  getIsAuctionComplete = (createdAt) => {\n    const momentTimeRemaining = calculateTimeRemaining(createdAt);\n    const durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n    const isAuctionComplete = durationTimeRemainingObj.isComplete\n    return isAuctionComplete\n  }\n\n  isUserBidHighestBid(auctionId,userBid) {\n    const winningBid = this.getMaxBidAmountFromAuctionId(auctionId);\n    console.log('winningBid: ',winningBid, ' vs user bid: ',userBid);\n\n    // this.setState({\n    //   winningBid: winningBid\n    // }, () => {\n    //   console.log('this.state',this.state.winningBid)\n    // })\n\n    const bidResult = null;\n    if (winningBid === userBid) {\n      bidResult = 'Auction won';\n    } else {\n      bidResult = 'Not the highest bid';\n    }\n    this.setState({\n      bidResult: bidResult\n    }, () => {\n      console.log('this.state.bidResult',this.state.bidResult)\n    })\n    return Promise.resolve(bidResult)\n  }\n\n  // returns a promise\n  async getMaxBidAmountFromAuctionId (auctionId) {\n    const params = { auctionId };\n    const result = await axios.get('/api/bid/completedAuctionHighestBid', { params })\n      .then(resp => {\n        return resp.data.bidAmount\n      }).catch(err => {\n        return Promise.reject(Error(err))\n      });\n    return Promise.resolve(result)\n  }\n\n\n  showBidStatus() {\n    const isAuctionComplete = this.getIsAuctionComplete(this.props.createdAt);\n    const bidResult = Promise.resolve(this.isUserBidHighestBid(this.props.auctionId,this.props.bidAmount));\n\n    return (\n      <div>\n        <span>{isAuctionComplete ? 'Complete' : 'Ongoing'}</span>\n        {/* <span>{bidResult}</span> */}\n      </div>\n    )\n  }\n\n  render() {\n    console.log('this.props',this.props);\n    return (\n      <div>\n        {this.showBidStatus()}\n      </div>\n    )\n  }\n}\n\nexport default BidStatus;\n\n\n\n// async isUserBidHighestBid(auctionId,userBid) {\n//   const winningBid = await this.getMaxBidAmountFromAuctionId(auctionId);\n//   console.log('winningBid: ',winningBid, ' vs user bid: ',userBid);\n\n//   const bidResult = null;\n//   if (winningBid === userBid) {\n//     bidResult = 'Auction won';\n//   } else {\n//     bidResult = 'Not the highest bid';\n//   }\n//   return bidResult\n// }\n\n\n// // returns a promise\n// getMaxBidAmountFromAuctionId (auctionId) {\n//   const params = { auctionId };\n//   const bidAmountResult = axios.get('/api/bid/completedAuctionHighestBid', { params })\n//   .then(resp => {\n//       return resp.data.bidAmount\n//   }).catch(err => {\n//       console.log(err);\n//   });\n//   return bidAmountResult\n// }\n\n// showBidStatus = (createdAt) => {\n//   // console.log('createdAt',createdAt);\n//   let momentTimeRemaining = calculateTimeRemaining(createdAt);\n//   let durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n\n//   if (durationTimeRemainingObj.isComplete) {\n//     return <span><strong>Bid Status: </strong>Complete</span>\n//   } else {\n//     return <span><strong>Bid Status: </strong>Pending</span>\n//   }\n// }\n\n\n// async getMaxBidAmountFromAuctionId (auctionId) {\n\n//   // async function waitForPromise() {\n//   //   let result = await Promise.resolve('this is a sample promise');\n//   // }\n\n//   const params = { auctionId };\n//   const bidAmountResult = await axios.get('/api/bid/completedAuctionHighestBid', { params })\n//   .then(resp => {\n//       console.log('This should be the max amount: ',resp.data.bidAmount);\n//       return resp.data.bidAmount\n//   }).catch(err => {\n//       console.log(err);\n//   });\n//   return bidAmountResult\n// }"]},"metadata":{},"sourceType":"module"}