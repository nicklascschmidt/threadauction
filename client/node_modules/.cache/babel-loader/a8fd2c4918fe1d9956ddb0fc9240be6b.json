{"ast":null,"code":"import _classCallCheck from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/bidStatus/bidStatus.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nvar BidStatus =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BidStatus, _React$Component);\n\n  function BidStatus(props) {\n    var _this;\n\n    _classCallCheck(this, BidStatus);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BidStatus).call(this, props));\n\n    _this.getIsAuctionComplete = function (createdAt) {\n      var momentTimeRemaining = calculateTimeRemaining(createdAt);\n      var durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n      var isAuctionComplete = durationTimeRemainingObj.isComplete;\n      return isAuctionComplete;\n    };\n\n    _this.state = {\n      winningBid: null,\n      bidResult: null\n    };\n    return _this;\n  } // is the auction complete\n  // is the users bid the max amount\n  // we'll need--\n  // auction createdAt or boolean whether or not it's complete\n  // userID\n  // user bid amount\n\n\n  _createClass(BidStatus, [{\n    key: \"isUserBidHighestBid\",\n    value: function isUserBidHighestBid(auctionId, userBid) {\n      var _this2 = this;\n\n      winningBid = new Promise(function (resolve, reject) {\n        _this2.getMaxBidAmountFromAuctionId(auctionId).then(function (resp) {\n          resolve(resp.data.bidAmount);\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n      console.log('winningBid: ', winningBid, ' vs user bid: ', userBid);\n      return winningBid; // Promise.all(winningBid).then(data => {\n      //   console.log('~~~data',data);\n      // })\n      // if (winningBid === userBid) {\n      //   console.log('won')\n      //   this.setState({\n      //     bidResult: 'Auction won',\n      //   }, () => {\n      //     console.log('this.state.bidResult',this.state.bidResult);\n      //   })\n      // } else {\n      //   console.log('lost')\n      //   this.setState({\n      //     bidResult: 'Not the highest bid',\n      //   }, () => {\n      //     console.log('this.state.bidResult',this.state.bidResult);\n      //   })\n      // }\n    } // returns a promise\n\n  }, {\n    key: \"getMaxBidAmountFromAuctionId\",\n    value: function getMaxBidAmountFromAuctionId(auctionId) {\n      var params = {\n        auctionId: auctionId\n      };\n      return axios.get('/api/bid/completedAuctionHighestBid', {\n        params: params\n      });\n    }\n  }, {\n    key: \"showBidStatus\",\n    value: function showBidStatus() {\n      var isAuctionComplete = this.getIsAuctionComplete(this.props.createdAt);\n      var winningBid = this.isUserBidHighestBid(this.props.auctionId, this.props.bidAmount);\n      console.log('~~~winningBid', winningBid);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, isAuctionComplete ? 'Complete' : 'Ongoing'));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log('this.props', this.props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, this.showBidStatus());\n    }\n  }]);\n\n  return BidStatus;\n}(React.Component);\n\nexport default BidStatus; // async isUserBidHighestBid(auctionId,userBid) {\n//   const winningBid = await this.getMaxBidAmountFromAuctionId(auctionId);\n//   console.log('winningBid: ',winningBid, ' vs user bid: ',userBid);\n//   const bidResult = null;\n//   if (winningBid === userBid) {\n//     bidResult = 'Auction won';\n//   } else {\n//     bidResult = 'Not the highest bid';\n//   }\n//   return bidResult\n// }\n// // returns a promise\n// getMaxBidAmountFromAuctionId (auctionId) {\n//   const params = { auctionId };\n//   const bidAmountResult = axios.get('/api/bid/completedAuctionHighestBid', { params })\n//   .then(resp => {\n//       return resp.data.bidAmount\n//   }).catch(err => {\n//       console.log(err);\n//   });\n//   return bidAmountResult\n// }\n// showBidStatus = (createdAt) => {\n//   // console.log('createdAt',createdAt);\n//   let momentTimeRemaining = calculateTimeRemaining(createdAt);\n//   let durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n//   if (durationTimeRemainingObj.isComplete) {\n//     return <span><strong>Bid Status: </strong>Complete</span>\n//   } else {\n//     return <span><strong>Bid Status: </strong>Pending</span>\n//   }\n// }\n// async getMaxBidAmountFromAuctionId (auctionId) {\n//   // async function waitForPromise() {\n//   //   let result = await Promise.resolve('this is a sample promise');\n//   // }\n//   const params = { auctionId };\n//   const bidAmountResult = await axios.get('/api/bid/completedAuctionHighestBid', { params })\n//   .then(resp => {\n//       console.log('This should be the max amount: ',resp.data.bidAmount);\n//       return resp.data.bidAmount\n//   }).catch(err => {\n//       console.log(err);\n//   });\n//   return bidAmountResult\n// }","map":{"version":3,"sources":["/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/bidStatus/bidStatus.js"],"names":["React","axios","calculateCreatedAt","calculateTimeRemaining","showDurationTimeRemaining","BidStatus","props","getIsAuctionComplete","createdAt","momentTimeRemaining","durationTimeRemainingObj","isAuctionComplete","isComplete","state","winningBid","bidResult","auctionId","userBid","Promise","resolve","reject","getMaxBidAmountFromAuctionId","then","resp","data","bidAmount","catch","err","console","log","params","get","isUserBidHighestBid","showBidStatus","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,EAA6BC,sBAA7B,EAAqDC,yBAArD,QAAsF,gCAAtF;;IAEMC,S;;;;;AACJ,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,mFAAMA,KAAN;;AADiB,UAkBnBC,oBAlBmB,GAkBI,UAACC,SAAD,EAAe;AACpC,UAAMC,mBAAmB,GAAGN,sBAAsB,CAACK,SAAD,CAAlD;AACA,UAAME,wBAAwB,GAAGN,yBAAyB,CAACK,mBAAD,CAA1D;AACA,UAAME,iBAAiB,GAAGD,wBAAwB,CAACE,UAAnD;AACA,aAAOD,iBAAP;AACD,KAvBkB;;AAGjB,UAAKE,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,IADD;AAEXC,MAAAA,SAAS,EAAE;AAFA,KAAb;AAHiB;AAOlB,G,CAED;AACA;AAEA;AACA;AACA;AACA;;;;;wCAUoBC,S,EAAUC,O,EAAS;AAAA;;AACrCH,MAAAA,UAAU,GAAG,IAAII,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7C,QAAA,MAAI,CAACC,4BAAL,CAAkCL,SAAlC,EACCM,IADD,CACM,UAAAC,IAAI,EAAI;AACZJ,UAAAA,OAAO,CAACI,IAAI,CAACC,IAAL,CAAUC,SAAX,CAAP;AACD,SAHD,EAGGC,KAHH,CAGS,UAAAC,GAAG,EAAI;AACdP,UAAAA,MAAM,CAACO,GAAD,CAAN;AACD,SALD;AAMD,OAPY,CAAb;AAQAC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2Bf,UAA3B,EAAuC,gBAAvC,EAAwDG,OAAxD;AAEA,aAAOH,UAAP,CAXqC,CAarC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAED,K,CAED;;;;iDAC8BE,S,EAAW;AACvC,UAAMc,MAAM,GAAG;AAAEd,QAAAA,SAAS,EAATA;AAAF,OAAf;AACA,aAAOf,KAAK,CAAC8B,GAAN,CAAU,qCAAV,EAAiD;AAAED,QAAAA,MAAM,EAANA;AAAF,OAAjD,CAAP;AACD;;;oCAGe;AACd,UAAMnB,iBAAiB,GAAG,KAAKJ,oBAAL,CAA0B,KAAKD,KAAL,CAAWE,SAArC,CAA1B;AACA,UAAMM,UAAU,GAAG,KAAKkB,mBAAL,CAAyB,KAAK1B,KAAL,CAAWU,SAApC,EAA8C,KAAKV,KAAL,CAAWmB,SAAzD,CAAnB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4Bf,UAA5B;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOH,iBAAiB,GAAG,UAAH,GAAgB,SAAxC,CADF,CADF;AAMD;;;6BAEQ;AACPiB,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyB,KAAKvB,KAA9B;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAK2B,aAAL,EADH,CADF;AAKD;;;;EAvFqBjC,KAAK,CAACkC,S;;AA0F9B,eAAe7B,SAAf,C,CAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nclass BidStatus extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      winningBid: null,\n      bidResult: null,\n    }\n  }\n\n  // is the auction complete\n  // is the users bid the max amount\n\n  // we'll need--\n  // auction createdAt or boolean whether or not it's complete\n  // userID\n  // user bid amount\n\n\n  getIsAuctionComplete = (createdAt) => {\n    const momentTimeRemaining = calculateTimeRemaining(createdAt);\n    const durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n    const isAuctionComplete = durationTimeRemainingObj.isComplete\n    return isAuctionComplete\n  }\n\n  isUserBidHighestBid(auctionId,userBid) {\n    winningBid = new Promise( (resolve, reject) => {\n      this.getMaxBidAmountFromAuctionId(auctionId)\n      .then(resp => {\n        resolve(resp.data.bidAmount)\n      }).catch(err => {\n        reject(err)\n      });\n    })\n    console.log('winningBid: ',winningBid, ' vs user bid: ',userBid);\n    \n    return winningBid;\n\n    // Promise.all(winningBid).then(data => {\n    //   console.log('~~~data',data);\n    // })\n\n    // if (winningBid === userBid) {\n    //   console.log('won')\n    //   this.setState({\n    //     bidResult: 'Auction won',\n    //   }, () => {\n    //     console.log('this.state.bidResult',this.state.bidResult);\n    //   })\n    // } else {\n    //   console.log('lost')\n    //   this.setState({\n    //     bidResult: 'Not the highest bid',\n    //   }, () => {\n    //     console.log('this.state.bidResult',this.state.bidResult);\n    //   })\n    // }\n    \n  }\n\n  // returns a promise\n  getMaxBidAmountFromAuctionId (auctionId) {\n    const params = { auctionId };\n    return axios.get('/api/bid/completedAuctionHighestBid', { params })\n  }\n\n\n  showBidStatus() {\n    const isAuctionComplete = this.getIsAuctionComplete(this.props.createdAt);\n    const winningBid = this.isUserBidHighestBid(this.props.auctionId,this.props.bidAmount);\n    console.log('~~~winningBid',winningBid)\n    return (\n      <div>\n        <span>{isAuctionComplete ? 'Complete' : 'Ongoing'}</span>\n        {/* <span>{bidResult}</span> */}\n      </div>\n    )\n  }\n\n  render() {\n    console.log('this.props',this.props);\n    return (\n      <div>\n        {this.showBidStatus()}\n      </div>\n    )\n  }\n}\n\nexport default BidStatus;\n\n\n\n// async isUserBidHighestBid(auctionId,userBid) {\n//   const winningBid = await this.getMaxBidAmountFromAuctionId(auctionId);\n//   console.log('winningBid: ',winningBid, ' vs user bid: ',userBid);\n\n//   const bidResult = null;\n//   if (winningBid === userBid) {\n//     bidResult = 'Auction won';\n//   } else {\n//     bidResult = 'Not the highest bid';\n//   }\n//   return bidResult\n// }\n\n\n// // returns a promise\n// getMaxBidAmountFromAuctionId (auctionId) {\n//   const params = { auctionId };\n//   const bidAmountResult = axios.get('/api/bid/completedAuctionHighestBid', { params })\n//   .then(resp => {\n//       return resp.data.bidAmount\n//   }).catch(err => {\n//       console.log(err);\n//   });\n//   return bidAmountResult\n// }\n\n// showBidStatus = (createdAt) => {\n//   // console.log('createdAt',createdAt);\n//   let momentTimeRemaining = calculateTimeRemaining(createdAt);\n//   let durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n\n//   if (durationTimeRemainingObj.isComplete) {\n//     return <span><strong>Bid Status: </strong>Complete</span>\n//   } else {\n//     return <span><strong>Bid Status: </strong>Pending</span>\n//   }\n// }\n\n\n// async getMaxBidAmountFromAuctionId (auctionId) {\n\n//   // async function waitForPromise() {\n//   //   let result = await Promise.resolve('this is a sample promise');\n//   // }\n\n//   const params = { auctionId };\n//   const bidAmountResult = await axios.get('/api/bid/completedAuctionHighestBid', { params })\n//   .then(resp => {\n//       console.log('This should be the max amount: ',resp.data.bidAmount);\n//       return resp.data.bidAmount\n//   }).catch(err => {\n//       console.log(err);\n//   });\n//   return bidAmountResult\n// }"]},"metadata":{},"sourceType":"module"}