{"ast":null,"code":"import _classCallCheck from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/notifications/auctionComplete.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport axios from 'axios'; // import { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nvar AuctionComplete =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AuctionComplete, _React$Component);\n\n  function AuctionComplete(props) {\n    var _this;\n\n    _classCallCheck(this, AuctionComplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AuctionComplete).call(this, props));\n\n    _this.getCompletedAuctionIds = function (completedAuctionArray) {\n      console.log('getting completed auction IDs...', completedAuctionArray);\n      var completedAuctionIdArray = [];\n      completedAuctionArray.map(function (auction) {\n        completedAuctionIdArray.push(auction.id);\n      });\n\n      _this.setState({\n        completedAuctionIdArray: completedAuctionIdArray\n      }, function () {\n        _this.pullCompletedAuctionBidsFromDb(_this.state.completedAuctionIdArray);\n      });\n    };\n\n    _this.sendToReduxStore = function (data) {\n      console.log(\"sending to redux store...\");\n      var notificationData = {\n        userNotificationArray: data.userNotificationArray\n      };\n\n      _this.props.dispatch({\n        type: \"USER_NOTIFICATION\",\n        payload: notificationData\n      });\n\n      _this.setState({\n        loading: false,\n        errorArray: [],\n        isError: false,\n        sendToRedux: false,\n        sendToReduxData: null\n      });\n    };\n\n    _this.state = {\n      userNotificationArray: [],\n      userBids: [],\n      completedAuctionArray: [],\n      // all completed auctions\n      completedAuctionsBidArray: [],\n      // Bids the user placed on completed auctions\n      completedAuctionIdArray: [],\n      // AuctionIDs of completed auctions\n      userBidsArray: [],\n      loading: null,\n      errorArray: [],\n      isError: null,\n      sendToRedux: false,\n      sendToReduxData: null\n    };\n    return _this;\n  }\n\n  _createClass(AuctionComplete, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log('this.props', this.props);\n      this.pullCompletedAuctionDataFromDb();\n    } // find all completed auctions - return array of objects to this.state\n\n  }, {\n    key: \"pullCompletedAuctionDataFromDb\",\n    value: function pullCompletedAuctionDataFromDb() {\n      var _this2 = this;\n\n      console.log('pulling completed auctions...');\n      axios.get('/api/auction/complete').then(function (resp) {\n        console.log('/api/auction/complete -- resp.data', resp.data);\n\n        if (resp.status === 200) {\n          console.log('success');\n\n          _this2.setState({\n            completedAuctionArray: resp.data\n          }, function () {\n            _this2.getCompletedAuctionIds(_this2.state.completedAuctionArray);\n          });\n\n          if (resp.data === null) {\n            console.log('resp.data is null');\n\n            _this2.setState({\n              errorMsg: \"We couldn't find the product. Please try again.\",\n              isDbError: true\n            });\n          } else {\n            _this2.setState({\n              errorMsg: null,\n              isDbError: false\n            });\n\n            return;\n          }\n        } else {\n          console.log('front end /api/auction/id error');\n        }\n      }).catch(function (err) {\n        _this2.setState({\n          errorMsg: \"We ran into an issue trying to find the product. Please reload the page.\",\n          isDbError: true\n        });\n\n        console.log(err);\n      });\n    }\n  }, {\n    key: \"pullCompletedAuctionBidsFromDb\",\n    value: function pullCompletedAuctionBidsFromDb(completedAuctionIdArray) {\n      var _this3 = this;\n\n      console.log('pulling completed auction bids...', completedAuctionIdArray);\n      var auctionData = {\n        completedAuctionIdArray: completedAuctionIdArray,\n        userId: this.props.userId\n      };\n      axios.get('/api/bid/completedAuctionBids', {\n        params: auctionData\n      }).then(function (resp) {\n        console.log('/api/bid/completedAuctionBids -- resp.data', resp.data);\n\n        if (resp.status === 200) {\n          console.log('success');\n\n          _this3.setState({\n            completedAuctionsBidArray: resp.data\n          }, function () {\n            console.log('this.state.completedAuctionsBidArray', _this3.state.completedAuctionsBidArray);\n\n            _this3.buildUserBidsArray(_this3.state.completedAuctionsBidArray);\n          });\n\n          if (resp.data === null) {\n            console.log('resp.data is null');\n\n            _this3.setState({\n              errorMsg: \"We couldn't find the product. Please try again.\",\n              isDbError: true\n            });\n          } else {\n            _this3.setState({\n              errorMsg: null,\n              isDbError: false\n            });\n\n            return;\n          }\n        } else {\n          console.log('front end /api/auction/id error');\n        }\n      }).catch(function (err) {\n        _this3.setState({\n          errorMsg: \"We ran into an issue trying to find the product. Please reload the page.\",\n          isDbError: true\n        });\n\n        console.log(err);\n      });\n    } // completedAuctionArray: [], // all completed auctions\n    // completedAuctionsBidArray: [], // Bids the user placed on completed auctions\n    // completedAuctionIdArray: [], // AuctionIDs of completed auctions\n    // userBidsArray // array of objects-- \n\n  }, {\n    key: \"buildUserBidsArray\",\n    value: function buildUserBidsArray(userBidsArray) {\n      console.log('userBidsArray', userBidsArray); // object name is auctionId\n      // \n\n      var bidArray = [];\n\n      for (var n = 0; n < userBidsArray.length; n++) {\n        console.log('userBidsArray[n].AuctionID', userBidsArray[n].AuctionId);\n        var auctionID = userBidsArray[n].AuctionId;\n        bidArray[auctionID] = userBidsArray[n].bidAmount; // bidArray.push(bidObj);\n      }\n\n      console.log('bidArray', bidArray);\n    } // for all auction bids\n    // find the max for each Auction ID\n    // return the corresponding userId of that highest bid\n    // if the winning userId = userId from redux, then display notification saying you won the auction for [auctionId]\n    // search db for that auctionId and return product listing of it\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log('~~~~~~ notification');\n      return React.createElement(\"span\", {\n        onClick: this.callme,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, \"Yo \", this.props.userId);\n    }\n  }]);\n\n  return AuctionComplete;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    username: state.username,\n    userId: state.userId,\n    isLoggedIn: true\n  };\n}\n\nexport default connect(mapStateToProps)(AuctionComplete);","map":{"version":3,"sources":["/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/notifications/auctionComplete.js"],"names":["React","connect","axios","AuctionComplete","props","getCompletedAuctionIds","completedAuctionArray","console","log","completedAuctionIdArray","map","auction","push","id","setState","pullCompletedAuctionBidsFromDb","state","sendToReduxStore","data","notificationData","userNotificationArray","dispatch","type","payload","loading","errorArray","isError","sendToRedux","sendToReduxData","userBids","completedAuctionsBidArray","userBidsArray","pullCompletedAuctionDataFromDb","get","then","resp","status","errorMsg","isDbError","catch","err","auctionData","userId","params","buildUserBidsArray","bidArray","n","length","AuctionId","auctionID","bidAmount","callme","Component","mapStateToProps","username","isLoggedIn"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from \"react-redux\";\nimport axios from 'axios';\n// import { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nclass AuctionComplete extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      userNotificationArray: [],\n      userBids: [],\n      completedAuctionArray: [], // all completed auctions\n      completedAuctionsBidArray: [], // Bids the user placed on completed auctions\n      completedAuctionIdArray: [], // AuctionIDs of completed auctions\n      userBidsArray: [],\n\n      loading: null,\n      errorArray: [],\n      isError: null,\n      sendToRedux: false,\n      sendToReduxData: null,\n    }\n  }\n\n  componentDidMount() {\n    console.log('this.props',this.props);\n    this.pullCompletedAuctionDataFromDb();\n  }\n\n\n  // find all completed auctions - return array of objects to this.state\n  pullCompletedAuctionDataFromDb() {\n    console.log('pulling completed auctions...');\n\n    axios.get('/api/auction/complete')\n    .then(resp => {\n        console.log('/api/auction/complete -- resp.data',resp.data);\n        if (resp.status === 200) {\n            console.log('success');\n            this.setState({\n              completedAuctionArray: resp.data\n            }, () => {\n              this.getCompletedAuctionIds(this.state.completedAuctionArray);\n            })\n            if (resp.data === null) {\n                console.log('resp.data is null');\n                this.setState({\n                    errorMsg: `We couldn't find the product. Please try again.`,\n                    isDbError: true\n                });\n            } else {\n                this.setState({\n                    errorMsg: null,\n                    isDbError: false\n                });\n                return\n            }\n        } else {\n            console.log('front end /api/auction/id error');\n        }\n    }).catch(err => {\n        this.setState({\n            errorMsg: `We ran into an issue trying to find the product. Please reload the page.`,\n            isDbError: true\n        });\n        console.log(err);\n    });\n  }\n\n  getCompletedAuctionIds = (completedAuctionArray) => {\n    console.log('getting completed auction IDs...',completedAuctionArray);\n    let completedAuctionIdArray = [];\n\n    completedAuctionArray.map( (auction) => {\n      completedAuctionIdArray.push(auction.id);\n    })\n\n    this.setState({\n      completedAuctionIdArray: completedAuctionIdArray\n    }, () => {\n      this.pullCompletedAuctionBidsFromDb(this.state.completedAuctionIdArray);\n    })\n  }\n\n  pullCompletedAuctionBidsFromDb(completedAuctionIdArray) {\n    console.log('pulling completed auction bids...',completedAuctionIdArray);\n\n    const auctionData = {\n      completedAuctionIdArray: completedAuctionIdArray,\n      userId: this.props.userId,\n    };\n\n    axios.get('/api/bid/completedAuctionBids', {\n      params: auctionData\n    })\n    .then(resp => {\n      console.log('/api/bid/completedAuctionBids -- resp.data',resp.data);\n      if (resp.status === 200) {\n          console.log('success');\n          this.setState({\n            completedAuctionsBidArray: resp.data\n          }, () => {\n            console.log('this.state.completedAuctionsBidArray',this.state.completedAuctionsBidArray);\n            this.buildUserBidsArray(this.state.completedAuctionsBidArray);\n          })\n          if (resp.data === null) {\n              console.log('resp.data is null');\n              this.setState({\n                  errorMsg: `We couldn't find the product. Please try again.`,\n                  isDbError: true\n              });\n          } else {\n              this.setState({\n                  errorMsg: null,\n                  isDbError: false\n              });\n              return\n          }\n      } else {\n          console.log('front end /api/auction/id error');\n      }\n    }).catch(err => {\n        this.setState({\n            errorMsg: `We ran into an issue trying to find the product. Please reload the page.`,\n            isDbError: true\n        });\n        console.log(err);\n    });\n  }\n\n  // completedAuctionArray: [], // all completed auctions\n  // completedAuctionsBidArray: [], // Bids the user placed on completed auctions\n  // completedAuctionIdArray: [], // AuctionIDs of completed auctions\n  // userBidsArray // array of objects-- \n\n  buildUserBidsArray (userBidsArray) {\n    console.log('userBidsArray',userBidsArray);\n    // object name is auctionId\n    // \n    let bidArray = [];\n    for (let n=0; n<userBidsArray.length; n++) {\n      console.log('userBidsArray[n].AuctionID',userBidsArray[n].AuctionId);\n      let auctionID = userBidsArray[n].AuctionId;\n      bidArray[auctionID] = userBidsArray[n].bidAmount;\n\n      // bidArray.push(bidObj);\n    }\n    console.log('bidArray',bidArray);\n    \n\n  }\n\n  // for all auction bids\n  // find the max for each Auction ID\n  // return the corresponding userId of that highest bid\n  // if the winning userId = userId from redux, then display notification saying you won the auction for [auctionId]\n  // search db for that auctionId and return product listing of it\n\n\n\n  sendToReduxStore = (data) => {\n    console.log(\"sending to redux store...\");\n\n    const notificationData = {\n      userNotificationArray: data.userNotificationArray,\n    };\n\n    this.props.dispatch({\n      type: \"USER_NOTIFICATION\",\n      payload: notificationData\n    });\n\n    this.setState({\n      loading: false,\n      errorArray: [],\n      isError: false,\n      sendToRedux: false,\n      sendToReduxData: null\n    });\n  };\n\n\n  render() {\n    console.log('~~~~~~ notification');\n    return (\n      <span onClick={this.callme}>\n        Yo {this.props.userId}\n      </span>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    username: state.username,\n    userId: state.userId,\n    isLoggedIn: true\n  };\n}\n\nexport default connect(mapStateToProps)(AuctionComplete);"]},"metadata":{},"sourceType":"module"}