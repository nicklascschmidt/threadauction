{"ast":null,"code":"import _classCallCheck from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/bidStatus/bidStatus.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nvar BidStatus =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BidStatus, _React$Component);\n\n  function BidStatus(props) {\n    var _this;\n\n    _classCallCheck(this, BidStatus);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BidStatus).call(this, props));\n\n    _this.getIsAuctionComplete = function (createdAt) {\n      var momentTimeRemaining = calculateTimeRemaining(createdAt);\n      var durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n      var isAuctionComplete = durationTimeRemainingObj.isComplete;\n      return isAuctionComplete;\n    };\n\n    _this.state = {\n      bidResult: null\n    };\n    return _this;\n  } // is the auction complete\n  // is the users bid the max amount\n  // we'll need--\n  // auction createdAt or boolean whether or not it's complete\n  // userID\n  // user bid amount\n\n\n  _createClass(BidStatus, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.isUserBidHighestBid(this.props.auctionId, this.props.bidAmount);\n    }\n  }, {\n    key: \"isUserBidHighestBid\",\n    value: function isUserBidHighestBid(auctionId, userBid) {\n      var _this2 = this;\n\n      var winningBid = new Promise(function (resolve, reject) {\n        _this2.getMaxBidAmountFromAuctionId(auctionId).then(function (resp) {\n          resolve(resp.data.bidAmount);\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n      winningBid.then(function (data) {\n        console.log('winningBid: ', data, ' vs user bid: ', userBid);\n        var bidResult = null;\n\n        if (data === userBid) {\n          bidResult = 'Auction won';\n        } else {\n          bidResult = 'Not the highest bid';\n        }\n\n        _this2.setState({\n          bidResult: bidResult\n        });\n      }).catch(function (err) {\n        console.log(err);\n      });\n    } // returns a promise\n\n  }, {\n    key: \"getMaxBidAmountFromAuctionId\",\n    value: function getMaxBidAmountFromAuctionId(auctionId) {\n      var params = {\n        auctionId: auctionId\n      };\n      return axios.get('/api/bid/completedAuctionHighestBid', {\n        params: params\n      });\n    }\n  }, {\n    key: \"showBidStatus\",\n    value: function showBidStatus() {\n      var isAuctionComplete = this.getIsAuctionComplete(this.props.createdAt);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, isAuctionComplete ? 'Complete' : 'Ongoing'), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, this.state.bidResult));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log('this.props', this.props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, this.showBidStatus());\n    }\n  }]);\n\n  return BidStatus;\n}(React.Component);\n\nexport default BidStatus; // isUserBidHighestBid(auctionId,userBid) {\n//   const winningBid = new Promise( (resolve, reject) => {\n//     this.getMaxBidAmountFromAuctionId(auctionId)\n//     .then(resp => {\n//       resolve(resp.data.bidAmount)\n//     }).catch(err => {\n//       reject(err)\n//     });\n//   })\n//   console.log('winningBid: ',winningBid, ' vs user bid: ',userBid);\n//   return winningBid;\n// }\n// // returns a promise\n// getMaxBidAmountFromAuctionId (auctionId) {\n//   const params = { auctionId };\n//   return axios.get('/api/bid/completedAuctionHighestBid', { params })\n// }\n// async isUserBidHighestBid(auctionId,userBid) {\n//   const winningBid = await this.getMaxBidAmountFromAuctionId(auctionId);\n//   console.log('winningBid: ',winningBid, ' vs user bid: ',userBid);\n//   const bidResult = null;\n//   if (winningBid === userBid) {\n//     bidResult = 'Auction won';\n//   } else {\n//     bidResult = 'Not the highest bid';\n//   }\n//   return bidResult\n// }\n// // returns a promise\n// getMaxBidAmountFromAuctionId (auctionId) {\n//   const params = { auctionId };\n//   const bidAmountResult = axios.get('/api/bid/completedAuctionHighestBid', { params })\n//   .then(resp => {\n//       return resp.data.bidAmount\n//   }).catch(err => {\n//       console.log(err);\n//   });\n//   return bidAmountResult\n// }\n// showBidStatus = (createdAt) => {\n//   // console.log('createdAt',createdAt);\n//   let momentTimeRemaining = calculateTimeRemaining(createdAt);\n//   let durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n//   if (durationTimeRemainingObj.isComplete) {\n//     return <span><strong>Bid Status: </strong>Complete</span>\n//   } else {\n//     return <span><strong>Bid Status: </strong>Pending</span>\n//   }\n// }\n// async getMaxBidAmountFromAuctionId (auctionId) {\n//   // async function waitForPromise() {\n//   //   let result = await Promise.resolve('this is a sample promise');\n//   // }\n//   const params = { auctionId };\n//   const bidAmountResult = await axios.get('/api/bid/completedAuctionHighestBid', { params })\n//   .then(resp => {\n//       console.log('This should be the max amount: ',resp.data.bidAmount);\n//       return resp.data.bidAmount\n//   }).catch(err => {\n//       console.log(err);\n//   });\n//   return bidAmountResult\n// }","map":{"version":3,"sources":["/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/bidStatus/bidStatus.js"],"names":["React","axios","calculateCreatedAt","calculateTimeRemaining","showDurationTimeRemaining","BidStatus","props","getIsAuctionComplete","createdAt","momentTimeRemaining","durationTimeRemainingObj","isAuctionComplete","isComplete","state","bidResult","isUserBidHighestBid","auctionId","bidAmount","userBid","winningBid","Promise","resolve","reject","getMaxBidAmountFromAuctionId","then","resp","data","catch","err","console","log","setState","params","get","showBidStatus","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nclass BidStatus extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      bidResult: null,\n    }\n  }\n\n  // is the auction complete\n  // is the users bid the max amount\n\n  // we'll need--\n  // auction createdAt or boolean whether or not it's complete\n  // userID\n  // user bid amount\n\n  componentDidMount() {\n    this.isUserBidHighestBid(this.props.auctionId,this.props.bidAmount);\n  }\n\n\n  getIsAuctionComplete = (createdAt) => {\n    const momentTimeRemaining = calculateTimeRemaining(createdAt);\n    const durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n    const isAuctionComplete = durationTimeRemainingObj.isComplete\n    return isAuctionComplete\n  }\n\n\n  isUserBidHighestBid(auctionId,userBid) {\n    const winningBid = new Promise( (resolve, reject) => {\n      this.getMaxBidAmountFromAuctionId(auctionId)\n        .then(resp => {\n          resolve(resp.data.bidAmount)\n        }).catch(err => {\n          reject(err)\n        });\n    })\n    winningBid.then( (data) => {\n      console.log('winningBid: ',data, ' vs user bid: ',userBid);\n\n      let bidResult = null;\n      if (data === userBid) {\n        bidResult = 'Auction won';\n      } else {\n        bidResult = 'Not the highest bid';\n      }\n      this.setState({\n        bidResult: bidResult\n      })\n    }).catch( (err) => {\n      console.log(err)\n    })\n  }\n\n  // returns a promise\n  getMaxBidAmountFromAuctionId(auctionId) {\n    const params = { auctionId };\n    return axios.get('/api/bid/completedAuctionHighestBid', { params })\n  }\n\n\n  showBidStatus() {\n    const isAuctionComplete = this.getIsAuctionComplete(this.props.createdAt);\n\n    return (\n      <div>\n        <span>{isAuctionComplete ? 'Complete' : 'Ongoing'}</span>\n        <span>{this.state.bidResult}</span>\n      </div>\n    )\n  }\n\n  render() {\n    console.log('this.props',this.props);\n    return (\n      <div>\n        {this.showBidStatus()}\n      </div>\n    )\n  }\n}\n\nexport default BidStatus;\n\n\n\n\n\n  // isUserBidHighestBid(auctionId,userBid) {\n  //   const winningBid = new Promise( (resolve, reject) => {\n  //     this.getMaxBidAmountFromAuctionId(auctionId)\n  //     .then(resp => {\n  //       resolve(resp.data.bidAmount)\n  //     }).catch(err => {\n  //       reject(err)\n  //     });\n  //   })\n  //   console.log('winningBid: ',winningBid, ' vs user bid: ',userBid);\n    \n  //   return winningBid;\n  // }\n\n  // // returns a promise\n  // getMaxBidAmountFromAuctionId (auctionId) {\n  //   const params = { auctionId };\n  //   return axios.get('/api/bid/completedAuctionHighestBid', { params })\n  // }\n\n\n// async isUserBidHighestBid(auctionId,userBid) {\n//   const winningBid = await this.getMaxBidAmountFromAuctionId(auctionId);\n//   console.log('winningBid: ',winningBid, ' vs user bid: ',userBid);\n\n//   const bidResult = null;\n//   if (winningBid === userBid) {\n//     bidResult = 'Auction won';\n//   } else {\n//     bidResult = 'Not the highest bid';\n//   }\n//   return bidResult\n// }\n\n\n// // returns a promise\n// getMaxBidAmountFromAuctionId (auctionId) {\n//   const params = { auctionId };\n//   const bidAmountResult = axios.get('/api/bid/completedAuctionHighestBid', { params })\n//   .then(resp => {\n//       return resp.data.bidAmount\n//   }).catch(err => {\n//       console.log(err);\n//   });\n//   return bidAmountResult\n// }\n\n// showBidStatus = (createdAt) => {\n//   // console.log('createdAt',createdAt);\n//   let momentTimeRemaining = calculateTimeRemaining(createdAt);\n//   let durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n\n//   if (durationTimeRemainingObj.isComplete) {\n//     return <span><strong>Bid Status: </strong>Complete</span>\n//   } else {\n//     return <span><strong>Bid Status: </strong>Pending</span>\n//   }\n// }\n\n\n// async getMaxBidAmountFromAuctionId (auctionId) {\n\n//   // async function waitForPromise() {\n//   //   let result = await Promise.resolve('this is a sample promise');\n//   // }\n\n//   const params = { auctionId };\n//   const bidAmountResult = await axios.get('/api/bid/completedAuctionHighestBid', { params })\n//   .then(resp => {\n//       console.log('This should be the max amount: ',resp.data.bidAmount);\n//       return resp.data.bidAmount\n//   }).catch(err => {\n//       console.log(err);\n//   });\n//   return bidAmountResult\n// }"]},"metadata":{},"sourceType":"module"}