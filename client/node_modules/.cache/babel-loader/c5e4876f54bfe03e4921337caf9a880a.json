{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/bidStatus/bidStatus.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nvar BidStatus =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BidStatus, _React$Component);\n\n  function BidStatus(props) {\n    var _this;\n\n    _classCallCheck(this, BidStatus);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BidStatus).call(this, props));\n\n    _this.getIsAuctionComplete = function (createdAt) {\n      var momentTimeRemaining = calculateTimeRemaining(createdAt);\n      var durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n      var isAuctionComplete = durationTimeRemainingObj.isComplete;\n      return isAuctionComplete;\n    };\n\n    _this.state = {};\n    return _this;\n  } // is the auction complete\n  // is the users bid the max amount\n  // we'll need--\n  // auction createdAt or boolean whether or not it's complete\n  // userID\n  // user bid amount\n\n\n  _createClass(BidStatus, [{\n    key: \"isUserBidWinningBid\",\n    value: function isUserBidWinningBid() {\n      var winningBid = this.getMaxBidAmountFromAuctionId(this.props.auctionId);\n      console.log('winningBid: ', winningBid);\n    }\n  }, {\n    key: \"getMaxBidAmountFromAuctionId\",\n    value: function () {\n      var _getMaxBidAmountFromAuctionId = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(auctionId) {\n        var params, bidAmountResult;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // async function waitForPromise() {\n                //   let result = await Promise.resolve('this is a sample promise');\n                // }\n                params = {\n                  auctionId: auctionId\n                };\n                _context.next = 3;\n                return axios.get('/api/bid/completedAuctionHighestBid', {\n                  params: params\n                }).then(function (resp) {\n                  console.log('This should be the max amount: ', resp.data.bidAmount);\n                  return resp.data.bidAmount;\n                }).catch(function (err) {\n                  console.log(err);\n                });\n\n              case 3:\n                bidAmountResult = _context.sent;\n                return _context.abrupt(\"return\", bidAmountResult);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function getMaxBidAmountFromAuctionId(_x) {\n        return _getMaxBidAmountFromAuctionId.apply(this, arguments);\n      };\n    }() // isUserBidWinningBid() {\n    //   const winningBid = this.getMaxBidAmountFromAuctionId(this.props.auctionId);\n    //   console.log('winningBid: ',winningBid);\n    //   this.fetchAuctionFromDb(auctionIdArray[n])\n    //     .then(resp => {\n    //       resolve(resp.data.bidAmount);\n    //     }).catch(err => {\n    //       reject(err);\n    //     })\n    // }\n    // getMaxBidAmountFromAuctionId (auctionId) {\n    //   const params = { auctionId };\n    //   return axios.get('/api/bid/completedAuctionHighestBid', { params })\n    //   // .then(resp => {\n    //   //     console.log('This should be the max amount: ',resp.data.bidAmount);\n    //   //     return resp.data.bidAmount\n    //   // }).catch(err => {\n    //   //     console.log(err);\n    //   // });\n    // }\n\n  }, {\n    key: \"showBidStatus\",\n    value: function showBidStatus() {\n      var isAuctionComplete = this.getIsAuctionComplete(this.props.createdAt);\n      this.isUserBidWinningBid();\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, isAuctionComplete ? 'complete' : 'not complete');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log('this.props', this.props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, this.showBidStatus()));\n    }\n  }]);\n\n  return BidStatus;\n}(React.Component);\n\nexport default BidStatus; // showBidStatus = (createdAt) => {\n//   // console.log('createdAt',createdAt);\n//   let momentTimeRemaining = calculateTimeRemaining(createdAt);\n//   let durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n//   if (durationTimeRemainingObj.isComplete) {\n//     return <span><strong>Bid Status: </strong>Complete</span>\n//   } else {\n//     return <span><strong>Bid Status: </strong>Pending</span>\n//   }\n// }","map":{"version":3,"sources":["/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/components/bidStatus/bidStatus.js"],"names":["React","axios","calculateCreatedAt","calculateTimeRemaining","showDurationTimeRemaining","BidStatus","props","getIsAuctionComplete","createdAt","momentTimeRemaining","durationTimeRemainingObj","isAuctionComplete","isComplete","state","winningBid","getMaxBidAmountFromAuctionId","auctionId","console","log","params","get","then","resp","data","bidAmount","catch","err","bidAmountResult","isUserBidWinningBid","showBidStatus","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,EAA6BC,sBAA7B,EAAqDC,yBAArD,QAAsF,gCAAtF;;IAEMC,S;;;;;AACJ,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,mFAAMA,KAAN;;AADiB,UAiBnBC,oBAjBmB,GAiBI,UAACC,SAAD,EAAe;AACpC,UAAMC,mBAAmB,GAAGN,sBAAsB,CAACK,SAAD,CAAlD;AACA,UAAME,wBAAwB,GAAGN,yBAAyB,CAACK,mBAAD,CAA1D;AACA,UAAME,iBAAiB,GAAGD,wBAAwB,CAACE,UAAnD;AACA,aAAOD,iBAAP;AACD,KAtBkB;;AAGjB,UAAKE,KAAL,GAAa,EAAb;AAHiB;AAMlB,G,CAED;AACA;AAEA;AACA;AACA;AACA;;;;;0CAUsB;AACpB,UAAMC,UAAU,GAAG,KAAKC,4BAAL,CAAkC,KAAKT,KAAL,CAAWU,SAA7C,CAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BJ,UAA3B;AACD;;;;;;gDAImCE,S;;;;;;AAElC;AACA;AACA;AAEMG,gBAAAA,M,GAAS;AAAEH,kBAAAA,SAAS,EAATA;AAAF,iB;;uBACef,KAAK,CAACmB,GAAN,CAAU,qCAAV,EAAiD;AAAED,kBAAAA,MAAM,EAANA;AAAF,iBAAjD,EAC7BE,IAD6B,CACxB,UAAAC,IAAI,EAAI;AACVL,kBAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA8CI,IAAI,CAACC,IAAL,CAAUC,SAAxD;AACA,yBAAOF,IAAI,CAACC,IAAL,CAAUC,SAAjB;AACH,iBAJ6B,EAI3BC,KAJ2B,CAIrB,UAAAC,GAAG,EAAI;AACZT,kBAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACH,iBAN6B,C;;;AAAxBC,gBAAAA,e;iDAOCA,e;;;;;;;;;;;;;QAGT;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;oCAEgB;AACd,UAAMhB,iBAAiB,GAAG,KAAKJ,oBAAL,CAA0B,KAAKD,KAAL,CAAWE,SAArC,CAA1B;AACA,WAAKoB,mBAAL;AACA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOjB,iBAAiB,GAAG,UAAH,GAAgB,cAAxC,CAAP;AACD;;;6BAEQ;AACPM,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyB,KAAKZ,KAA9B;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKuB,aAAL,EAAJ,CADF,CADF;AAKD;;;;EAvFqB7B,KAAK,CAAC8B,S;;AA0F9B,eAAezB,SAAf,C,CAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { calculateCreatedAt, calculateTimeRemaining, showDurationTimeRemaining } from '../timeConverter/timeConverter';\n\nclass BidStatus extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n\n    }\n  }\n\n  // is the auction complete\n  // is the users bid the max amount\n\n  // we'll need--\n  // auction createdAt or boolean whether or not it's complete\n  // userID\n  // user bid amount\n\n\n  getIsAuctionComplete = (createdAt) => {\n    const momentTimeRemaining = calculateTimeRemaining(createdAt);\n    const durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n    const isAuctionComplete = durationTimeRemainingObj.isComplete\n    return isAuctionComplete\n  }\n\n  isUserBidWinningBid() {\n    const winningBid = this.getMaxBidAmountFromAuctionId(this.props.auctionId);\n    console.log('winningBid: ',winningBid);\n  }\n\n  \n\n  async getMaxBidAmountFromAuctionId (auctionId) {\n\n    // async function waitForPromise() {\n    //   let result = await Promise.resolve('this is a sample promise');\n    // }\n\n    const params = { auctionId };\n    const bidAmountResult = await axios.get('/api/bid/completedAuctionHighestBid', { params })\n    .then(resp => {\n        console.log('This should be the max amount: ',resp.data.bidAmount);\n        return resp.data.bidAmount\n    }).catch(err => {\n        console.log(err);\n    });\n    return bidAmountResult\n  }\n\n  // isUserBidWinningBid() {\n  //   const winningBid = this.getMaxBidAmountFromAuctionId(this.props.auctionId);\n  //   console.log('winningBid: ',winningBid);\n\n  //   this.fetchAuctionFromDb(auctionIdArray[n])\n  //     .then(resp => {\n  //       resolve(resp.data.bidAmount);\n  //     }).catch(err => {\n  //       reject(err);\n  //     })\n  // }\n\n  \n\n  // getMaxBidAmountFromAuctionId (auctionId) {\n  //   const params = { auctionId };\n  //   return axios.get('/api/bid/completedAuctionHighestBid', { params })\n  //   // .then(resp => {\n  //   //     console.log('This should be the max amount: ',resp.data.bidAmount);\n  //   //     return resp.data.bidAmount\n  //   // }).catch(err => {\n  //   //     console.log(err);\n  //   // });\n  // }\n\n  showBidStatus() {\n    const isAuctionComplete = this.getIsAuctionComplete(this.props.createdAt);\n    this.isUserBidWinningBid()\n    return <span>{isAuctionComplete ? 'complete' : 'not complete'}</span>\n  }\n\n  render() {\n    console.log('this.props',this.props);\n    return (\n      <div>\n        <p>{this.showBidStatus()}</p>\n      </div>\n    )\n  }\n}\n\nexport default BidStatus;\n\n\n\n\n// showBidStatus = (createdAt) => {\n//   // console.log('createdAt',createdAt);\n//   let momentTimeRemaining = calculateTimeRemaining(createdAt);\n//   let durationTimeRemainingObj = showDurationTimeRemaining(momentTimeRemaining);\n\n//   if (durationTimeRemainingObj.isComplete) {\n//     return <span><strong>Bid Status: </strong>Complete</span>\n//   } else {\n//     return <span><strong>Bid Status: </strong>Pending</span>\n//   }\n// }"]},"metadata":{},"sourceType":"module"}