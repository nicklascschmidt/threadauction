{"map":"{\"version\":3,\"sources\":[\"/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/serviceWorker.js\",\"/Users/nicklascschmidt/Code/Nicky/threadauction/client/src/index.js\"],\"names\":[\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"initialState\",\"username\",\"password\",\"isLoggedIn\",\"store\",\"createStore\",\"state\",\"arguments\",\"length\",\"undefined\",\"action\",\"console\",\"log\",\"type\",\"payload\",\"ReactDOM\",\"render\",\"react_default\",\"a\",\"createElement\",\"es\",\"App_default\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"wLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8ECRAC,EAAe,CACjBC,SAAU,GACVC,SAAU,GACVC,YAAY,GAmBVC,EAAQC,OAAAA,EAAAA,EAAAA,CAhBE,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBP,EAAcU,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAG9C,OAFAE,QAAQC,IAAI,SAASF,GACrBC,QAAQC,IAAI,QAAQN,GACbI,EAAOG,MACZ,IAAK,qBAEH,OADAF,QAAQC,IAAI,wBACL,CACLX,SAAUS,EAAOI,QAAQb,SACzBC,SAAUQ,EAAOI,QAAQZ,SACzBC,WAAYO,EAAOI,QAAQX,YAE/B,QACE,OAAOG,KAOfS,EAAAA,EAASC,OACLC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUhB,MAAOA,GACba,EAAAC,EAAAC,cAACE,EAAAH,EAAD,OAGJI,SAASC,eAAe,SDqFtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA.\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      if (\\n        response.status === 404 ||\\n        response.headers.get('content-type').indexOf('javascript') === -1\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\n// redux\\nimport { Provider } from 'react-redux';\\nimport { createStore } from 'redux';\\n\\n\\nconst initialState = {\\n    username: '',\\n    password: '',\\n    isLoggedIn: false\\n}\\n  \\nconst reducer = (state = initialState, action) => {\\n    console.log('action',action);\\n    console.log('state',state);\\n    switch(action.type) {\\n      case 'USER_LOGIN_REQUEST':\\n        console.log('global state updated');\\n        return {\\n          username: action.payload.username,\\n          password: action.payload.password,\\n          isLoggedIn: action.payload.isLoggedIn\\n        }\\n      default:\\n        return state;\\n    }\\n}\\n  \\nconst store = createStore(reducer);\\n\\n\\nReactDOM.render(\\n    <Provider store={store}>\\n        <App />\\n    </Provider>\\n,\\n    document.getElementById('root')\\n);\\n\\n\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{13:function(e,t,o){e.exports=o(21)},21:function(e,t,o){\"use strict\";o.r(t);var a=o(1),s=o.n(a),n=o(7),i=o.n(n),c=o(8),r=o.n(c);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var l=o(12),d=o(2),m={username:\"\",password:\"\",isLoggedIn:!1},u=Object(d.b)(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:m,t=arguments.length>1?arguments[1]:void 0;switch(console.log(\"action\",t),console.log(\"state\",e),t.type){case\"USER_LOGIN_REQUEST\":return console.log(\"global state updated\"),{username:t.payload.username,password:t.payload.password,isLoggedIn:t.payload.isLoggedIn};default:return e}});i.a.render(s.a.createElement(l.a,{store:u},s.a.createElement(r.a,null)),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},8:function(e,t){throw new Error(\"Module build failed (from ./node_modules/babel-loader/lib/index.js):\\nTypeError: /Users/nicklascschmidt/Code/Nicky/threadauction/client/src/App.js: Duplicate declaration \\\"Home\\\"\\n\\x1b[0m \\x1b[90m  8 | \\x1b[39m\\x1b[36mimport\\x1b[39m \\x1b[33mUserProfile\\x1b[39m from \\x1b[32m'./pages/userProfile/userProfile'\\x1b[39m\\x1b[33m;\\x1b[39m\\x1b[0m\\n\\x1b[0m \\x1b[90m  9 | \\x1b[39m\\x1b[36mimport\\x1b[39m \\x1b[33mNav\\x1b[39m from \\x1b[32m'./components/nav/nav'\\x1b[39m\\x1b[33m;\\x1b[39m\\x1b[0m\\n\\x1b[0m\\x1b[31m\\x1b[1m>\\x1b[22m\\x1b[39m\\x1b[90m 10 | \\x1b[39m\\x1b[36mimport\\x1b[39m \\x1b[33mHome\\x1b[39m from \\x1b[32m'./pages/home/home'\\x1b[39m\\x1b[33m;\\x1b[39m\\x1b[0m\\n\\x1b[0m \\x1b[90m    | \\x1b[39m       \\x1b[31m\\x1b[1m^\\x1b[22m\\x1b[39m\\x1b[0m\\n\\x1b[0m \\x1b[90m 11 | \\x1b[39m\\x1b[0m\\n\\x1b[0m \\x1b[90m 12 | \\x1b[39m\\x1b[90m// test\\x1b[39m\\x1b[0m\\n\\x1b[0m \\x1b[90m 13 | \\x1b[39m\\x1b[36mimport\\x1b[39m \\x1b[33mProductSwitch\\x1b[39m from \\x1b[32m'./pages/productSwitch'\\x1b[39m\\x1b[33m;\\x1b[39m\\x1b[0m\\n    at File.buildCodeFrameError (/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/core/lib/transformation/file/file.js:261:12)\\n    at Scope.checkBlockScopedCollisions (/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/traverse/lib/scope/index.js:347:22)\\n    at Scope.registerBinding (/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/traverse/lib/scope/index.js:504:16)\\n    at Scope.registerDeclaration (/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/traverse/lib/scope/index.js:452:14)\\n    at Object.Declaration (/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/traverse/lib/scope/index.js:125:12)\\n    at NodePath._call (/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/traverse/lib/path/context.js:53:20)\\n    at NodePath.call (/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/traverse/lib/path/context.js:40:17)\\n    at NodePath.visit (/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/traverse/lib/path/context.js:88:12)\\n    at TraversalContext.visitQueue (/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/traverse/lib/context.js:118:16)\\n    at TraversalContext.visitMultiple (/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/traverse/lib/context.js:85:17)\\n    at TraversalContext.visit (/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/traverse/lib/context.js:144:19)\\n    at Function.traverse.node (/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/traverse/lib/index.js:94:17)\\n    at traverse (/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/traverse/lib/index.js:76:12)\\n    at NodePath.traverse (/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/traverse/lib/path/index.js:161:24)\\n    at Scope.crawl (/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/traverse/lib/scope/index.js:684:10)\\n    at Scope.init (/Users/nicklascschmidt/Code/Nicky/threadauction/client/node_modules/@babel/traverse/lib/scope/index.js:634:32)\")}},[[13,2,1]]]);","extractedComments":[]}