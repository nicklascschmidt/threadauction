{"version":3,"sources":["pages/login/login.js","pages/home/home.js","pages/productSwitch.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","console","log","_event$target","target","name","value","setState","defineProperty","handleSubmit","preventDefault","submitted","sendToReduxStore","_this$state","state","reduxData","username","password","loginAcceptedOrDenied","data","isLoggedIn","dispatch","type","payload","_this2","react_default","a","createElement","onChange","onClick","React","Component","connect","Home","login","ProductSwitch","initialState","store","createStore","arguments","length","undefined","action","App","es","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f16495b4.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            username: '',\n            password: '',\n            submitted: false\n        }\n    }\n\n    handleChange = (event) => {\n        console.log('login handleChange');\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        this.setState({\n            submitted: true\n        }, this.sendToReduxStore);\n\n    }\n\n    sendToReduxStore = () => {\n        const { username, password } = this.state;\n\n        const reduxData = {\n            username: username,\n            password: password\n        }\n        console.log('reduxData',reduxData);\n\n        if (this.state.submitted) {\n            this.loginAcceptedOrDenied(reduxData);\n        }\n    }\n\n    loginAcceptedOrDenied = (data) => {\n        // check db for login data here\n        data.isLoggedIn = true;\n\n        this.props.dispatch({\n            type: 'USER_LOGIN_REQUEST',\n            payload: data\n        });\n        this.setState({\n            submitted: false\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <form>\n                    <input\n                        type=\"text\"\n                        name=\"username\"\n                        value={this.state.username}\n                        onChange={event => this.handleChange(event)}\n                    />\n                    <input\n                        type=\"text\"\n                        name=\"password\"\n                        value={this.state.password}\n                        onChange={event => this.handleChange(event)}\n                    />\n                    <button onClick={this.handleSubmit}>submit</button>\n                </form>\n                <p>State user: {this.state.username}</p>\n                <p>State pw: {this.state.password}</p>\n                <p>Global props user: {this.props.username}</p>\n                <p>Global props pw: {this.props.password}</p>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    console.log('Login: mapStateToProps state',state);\n    return {\n      username: state.username,\n      password: state.password,\n      isLoggedIn: true\n    };\n}\n\nexport default connect(mapStateToProps)(Login);","import React, { Component } from \"react\";\nimport Login from '../login/login';\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <Login />\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React from 'react';\nimport { connect } from 'react-redux';\n\nclass ProductSwitch extends React.Component {\n    render() {\n        return (\n            <div>\n                <div>sup I'm a different component</div>\n                <div>{this.props.username}</div>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    console.log('Product: mapStateToProps state',state);\n    return {\n      username: state.username,\n      password: state.password,\n      isLoggedIn: true\n    };\n}\n\nexport default connect(mapStateToProps)(ProductSwitch);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n// redux\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\n// pages\nimport Home from \"./pages/home/home\";\nimport Login from './pages/login/login';\n// test\nimport ProductSwitch from './pages/productSwitch';\n\n\nconst initialState = {\n  username: '',\n  password: '',\n  isLoggedIn: false\n}\n\nconst reducer = (state = initialState, action) => {\n  console.log('action',action);\n  console.log('state',state);\n  switch(action.type) {\n    case 'USER_LOGIN_REQUEST':\n      console.log('global state updated');\n      return {\n        username: action.payload.username,\n        password: action.payload.password,\n        isLoggedIn: action.payload.isLoggedIn\n      }\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(reducer);\n\n// class App extends Component {\n//   render() {\n//     return (\n//       <Provider store={store}>\n//         <div className=\"App\">\n//           <h1>Login here:</h1>\n//           <Login />\n//           <Product />\n          \n//         </div>\n//       </Provider>\n//     );\n//   }\n// }\n\nconst App = () => (\n  <Provider store={store}>\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/product\" component={ProductSwitch} />\n          {/* <Route exact path=\"/books\" component={Books} />\n          <Route exact path=\"/books/:id\" component={Detail} />\n          <Route component={NoMatch} /> */}\n        </Switch>\n      </div>\n    </Router>\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}